namespace moris {

/** \defgroup TensorClass The Tensor class and Related Functions

This page discusses the purpose and function of the moris::Tensor class.

@section TensorIntro Introduction to Tensor Class

moris::Tensor has four template parameters: the type of the components (e.g., 
double, float or int), the order and dimmension of the Tensor, and a boolean 
that dictates whether or not the Tensor is symmetric. In general, all 
mathematical objects are tensors (i.e., a scalar is a 0-order tensor, a vector 
is a 1st order tensor, and matrix is a 2nd order tensor). In general, a tensor 
can have an arbitrary size in each of its degrees; for example, a 4th order 
tensor can be of size m-by-n-by-p-by-q, where m, n, p and q are not necessarily 
equal to each other. moris::Tensor is designed to handle tensors that apear in 
structural mechanics (e.g. the stress and strain tensors, along with the 
stiffness tensor that generalizes Hook's Law). As such, a tensor is always 
"square" (i.e., 2nd and 4th order tensors are assumed to be of size n-by-n and 
n-by-n-by-n-by-n, respectively). This size, n, is referred to as the dimension 
of the tensor, since it is dictated by the dimension of the problem. In 2D 
problems, n = 2; and in 3D problems, n = 3.

Because moris::Tensor uses a moris::Mat to store its information, the components 
must be mapped using Voigt notation. Voigt notation is primarily used to condense
symmetric tensors, such that only the unique compenents of a tensor are stored.
The following convention is used to condense a symmetric 2nd-order tensor:

-# Strike along the main diagonal, starting in the upper left and ending at the 
   bottom right.
-# Continue vertically along the last column.
-# Return to the starting point along the top row.

In this way, the tensor @f$ T_{ij} @f$ can be condensed into a vector @f$ 
\hat{T} @f$, such that

@f[
T_{ij} = \left( \begin{array}{ccc}
T_{xx} & T_{xy} & T_{xz} \\
T_{yx} & T_{yy} & t_{yz} \\
T_{zx} & T_{zy} & t_{zz} \end{array} \right) \Rightarrow \\
\hat{T} = \left( \begin{array}{c}
T_{xx} \\ T_{yy} \\ T_{zz} \\ T_{yz} \\ T_{xz} \\ T_{xy} \end{array} \right)
@f]

This convention can be expanded for unsymmetric tensors, such that

@f[
T_{ij} = \left( \begin{array}{ccc}
T_{xx} & T_{xy} & T_{xz} \\
T_{yx} & T_{yy} & t_{yz} \\
T_{zx} & T_{zy} & t_{zz} \end{array} \right) \Rightarrow \\
\hat{T} = \left( \begin{array}{c}
T_{xx} \\ T_{yy} \\ T_{zz} \\ T_{yz} \\ T_{xz} \\ T_{xy} \\ T_{zy} \\ T_{zx} \\ T_{yx} \end{array} \right)
@f]

A 4th order tensor is condensed in the same way for each pair of indices,
such that @f$ T_{ijkl} \Rightarrow \hat{T}_{pq} @f$, where 
@f$ (i,j) \rightarrow p @f$ and @f$ (k,l)\rightarrow q @f$. To this end, 
moris::Tensor owns a second moris::Mat that maps the location on the full 
tensor to the location on the storage vector (for 2nd order tensors) or matrix 
(for 4th order).


@section TensorAccess Declaring and Accessing Data

There are multiple ways to declare a tensor. The easiest is:


@include linalg/cl_Tensor/cl_Tensor_23sym.inc

Then, you may specific each unique member in  the tensor with the () operator.
Tensor of order n, take n arguments in the ()  operator; i.e. a 2nd order tensor
has <tt>T(ind0,ind1)</tt> whereas a 4th order tensor 
has <tt>T(ind0,ind1,ind2,ind3)</tt>.

Tensors can also be copied from other Tensors of the same type and order. Tensors 
can  also copy a moris::Mat whose components have been layed out in proper Voigt 
notation; however, this feature is only recommended if you are familiar with 
said Voigt notation.

@section TensorFuncs Tensor Product Functions

Because a moris::Mat is used to store the tensor data, tensor operations can 
easily be converted to the appropriate matrix operations.

@subsection TensorFuncs_DoubleInner Double Inner ("double dot") Product
Consider first the tensor double inner product (sometimes called the 
"double-dot" product) @f$ A:B = A_{ij}B_{ij} @f$. If each of the tensors were 
stored a full matrices (instead of as vectors using Voigt notation), then the 
double inner product would have to sum over two directions (potentially with a 
nested for-for loop). Using Voigt notation, this operator becomes a single dot 
product: @f$ A:B = A_{ij}B_{ij} = \hat{A}^T \hat{B} @f$.

For symmetric tensors, this operation loses contribution from the lower 
tiangular components of the tensor. Thus, they are added "under the hood". To 
perform the double inner product of two tensors, use the typical * operator (C++ 
does not allow the : operator to be overloaded). This applies to both symmetric 
and unsymmmetric tensors.

@include linalg/cl_Tensor/cl_Tensor_prod22.inc

@subsection TensorFuncs_prod42 Inner Product of a 4th and 2nd Order Tensors
A common tensor product that appears in structural mechanics is defined as @f$ 
A_{ij} = C_{ijkl}T_{kl} @f$. To perform this tensor product, you may use the * 
operator for symmetric and unsymmetric tensors:

@include linalg/cl_Tensor/cl_Tensor_prod42.inc
Note that the * operator returns a 2nd order tensor instead of scalar like in 
the double inner product.
*/
}
