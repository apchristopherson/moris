#include "cl_GEN_Intersection_Node_Bilinear.hpp"
#include "cl_GEN_Geometry.hpp"
#include "cl_GEN_Interpolation.hpp"
#include "cl_XTK_Quad_4_Basis_Function.hpp"

namespace moris
{
    namespace ge
    {

        //--------------------------------------------------------------------------------------------------------------

        Intersection_Node_Bilinear::Intersection_Node_Bilinear(
                std::shared_ptr<Intersection_Node> aFirstParentNode,
                std::shared_ptr<Intersection_Node> aSecondParentNode,
                uint                               aFirstParentNodeIndex,
                uint                               aSecondParentNodeIndex,
                const Matrix<DDRMat>&              aFirstParentNodeLocalCoordinates,
                const Matrix<DDRMat>&              aSecondParentNodeLocalCoordinates,
                const Matrix<DDUMat>&              aAncestorNodeIndices,
                const Cell<Matrix<DDRMat>>&        aAncestorNodeCoordinates,
                std::shared_ptr<Geometry>          aInterfaceGeometry,
                real                               aIsocontourThreshold,
                real                               aIsocontourTolerance,
                real                               aIntersectionTolerance)
                : Intersection_Node(
                        get_local_coordinate(
                                aFirstParentNodeLocalCoordinates,
                                aSecondParentNodeLocalCoordinates,
                                aAncestorNodeIndices,
                                aAncestorNodeCoordinates,
                                aInterfaceGeometry,
                                aIsocontourThreshold),
                        aFirstParentNode,
                        aSecondParentNode,
                        aFirstParentNodeIndex,
                        aSecondParentNodeIndex,
                        aFirstParentNodeLocalCoordinates,
                        aSecondParentNodeLocalCoordinates,
                        aAncestorNodeIndices,
                        aAncestorNodeCoordinates,
                        xtk::Quad_4_Basis_Function(),
                        aInterfaceGeometry,
                        aIsocontourThreshold,
                        aIsocontourTolerance,
                        aIntersectionTolerance)
        {
        }

        //--------------------------------------------------------------------------------------------------------------

        real Intersection_Node_Bilinear::get_dcoordinate_dfield_from_ancestor(uint aAncestorIndex)
        {
            // Locked interface geometry
            std::shared_ptr<Geometry> tLockedInterfaceGeometry = mInterfaceGeometry.lock();

            // Geometry field values
            real phi1 = tLockedInterfaceGeometry->get_field_value(mAncestorNodeIndices(0), mAncestorNodeCoordinates(0));
            real phi2 = tLockedInterfaceGeometry->get_field_value(mAncestorNodeIndices(1), mAncestorNodeCoordinates(1));
            real phi3 = tLockedInterfaceGeometry->get_field_value(mAncestorNodeIndices(2), mAncestorNodeCoordinates(2));
            real phi4 = tLockedInterfaceGeometry->get_field_value(mAncestorNodeIndices(3), mAncestorNodeCoordinates(3));

            // Isocontour threshold
            real iso = mIsocontourThreshold;

            if (mLinear)
            {
                // TODO
                Matrix<DDRMat> tFirstBasisValues;
                Matrix<DDRMat> tSecondBasisValues;
                xtk::Quad_4_Basis_Function().evaluate_basis_function({{xi1, eta1}}, tFirstBasisValues);
                xtk::Quad_4_Basis_Function().evaluate_basis_function({{xi2, eta2}}, tSecondBasisValues);

                real tFirstParentPhi = tFirstBasisValues(0) * phi1 + tFirstBasisValues(1) * phi2 +
                        tFirstBasisValues(2) * phi3 + tFirstBasisValues(3) * phi4;
                real tSecondParentPhi = tSecondBasisValues(0) * phi1 + tSecondBasisValues(1) * phi2 +
                        tSecondBasisValues(2) * phi3 + tSecondBasisValues(3) * phi4;

                return 2 * (tFirstBasisValues(aAncestorIndex) * (iso - tSecondParentPhi)
                          + tSecondBasisValues(aAncestorIndex) * (tFirstParentPhi - iso))
                          / std::pow((tSecondParentPhi - tFirstParentPhi), 2);
            }
            else
            {
                switch (aAncestorIndex)
                {
                    case 0:
                    {
                        if (mBilinearCase1)
                        {
                            return (xi2 - eta1 - xi1 + eta2 + xi1*eta1 - xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 + 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 + 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 - 2*eta1*eta1*phi3 - 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 + 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 + 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 - 2*eta2*eta2*phi3 - 2*eta2*eta2*phi4 - 4*xi1*eta2*eta2*phi1 - 4*eta1*xi2*xi2*phi1 - 4*xi1*xi1*eta2*phi1 - 4*eta1*eta1*xi2*phi1 + 4*eta1*xi2*xi2*phi2 + 4*xi1*xi1*eta2*phi2 + 4*xi1*eta2*eta2*phi4 + 4*eta1*eta1*xi2*phi4 + 2*xi1*xi1*eta2*eta2*phi1 + 2*eta1*eta1*xi2*xi2*phi1 - 2*xi1*xi1*eta2*eta2*phi2 - 2*eta1*eta1*xi2*xi2*phi2 + 2*xi1*xi1*eta2*eta2*phi3 + 2*eta1*eta1*xi2*xi2*phi3 - 2*xi1*xi1*eta2*eta2*phi4 - 2*eta1*eta1*xi2*xi2*phi4 + 16*iso*xi1*eta1 - 16*iso*xi1*eta2 - 16*iso*eta1*xi2 + 16*iso*xi2*eta2 - 4*xi1*eta1*phi1 - 12*xi1*eta1*phi3 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 + 4*xi1*eta2*phi1 + 4*eta1*xi2*phi1 + 4*xi1*xi2*phi3 - 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 + 12*xi1*eta2*phi3 + 12*eta1*xi2*phi3 - 4*eta1*eta2*phi2 + 4*eta1*eta2*phi3 + 4*eta1*eta2*phi4 - 4*xi2*eta2*phi1 - 12*xi2*eta2*phi3 + 4*xi1*eta1*xi2*phi1 - 4*xi1*eta1*xi2*phi2 + 4*xi1*eta1*eta2*phi1 - 4*xi1*eta1*eta2*phi4 + 4*xi1*xi2*eta2*phi1 - 4*xi1*xi2*eta2*phi2 + 4*eta1*xi2*eta2*phi1 - 4*eta1*xi2*eta2*phi4 - 4*xi1*eta1*xi2*eta2*phi1 + 4*xi1*eta1*xi2*eta2*phi2 - 4*xi1*eta1*xi2*eta2*phi3 + 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4)) - (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) - xi1*phi1 + xi1*phi2 - eta1*phi1 + xi1*phi3 - eta1*phi2 - xi1*phi4 + eta1*phi3 + eta1*phi4 + xi2*phi1 - xi2*phi2 + eta2*phi1 - xi2*phi3 + eta2*phi2 + xi2*phi4 - eta2*phi3 - eta2*phi4 + xi1*eta1*phi1 - xi1*eta1*phi2 + xi1*eta1*phi3 - xi1*eta1*phi4 - xi2*eta2*phi1 + xi2*eta2*phi2 - xi2*eta2*phi3 + xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2));
                        }
                        else
                        {
                            return (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) + xi1*phi1 - xi1*phi2 + eta1*phi1 - xi1*phi3 + eta1*phi2 + xi1*phi4 - eta1*phi3 - eta1*phi4 - xi2*phi1 + xi2*phi2 - eta2*phi1 + xi2*phi3 - eta2*phi2 - xi2*phi4 + eta2*phi3 + eta2*phi4 - xi1*eta1*phi1 + xi1*eta1*phi2 - xi1*eta1*phi3 + xi1*eta1*phi4 + xi2*eta2*phi1 - xi2*eta2*phi2 + xi2*eta2*phi3 - xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2)) - (xi1 + eta1 - xi2 - eta2 - xi1*eta1 + xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 + 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 + 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 - 2*eta1*eta1*phi3 - 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 + 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 + 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 - 2*eta2*eta2*phi3 - 2*eta2*eta2*phi4 - 4*xi1*eta2*eta2*phi1 - 4*eta1*xi2*xi2*phi1 - 4*xi1*xi1*eta2*phi1 - 4*eta1*eta1*xi2*phi1 + 4*eta1*xi2*xi2*phi2 + 4*xi1*xi1*eta2*phi2 + 4*xi1*eta2*eta2*phi4 + 4*eta1*eta1*xi2*phi4 + 2*xi1*xi1*eta2*eta2*phi1 + 2*eta1*eta1*xi2*xi2*phi1 - 2*xi1*xi1*eta2*eta2*phi2 - 2*eta1*eta1*xi2*xi2*phi2 + 2*xi1*xi1*eta2*eta2*phi3 + 2*eta1*eta1*xi2*xi2*phi3 - 2*xi1*xi1*eta2*eta2*phi4 - 2*eta1*eta1*xi2*xi2*phi4 + 16*iso*xi1*eta1 - 16*iso*xi1*eta2 - 16*iso*eta1*xi2 + 16*iso*xi2*eta2 - 4*xi1*eta1*phi1 - 12*xi1*eta1*phi3 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 + 4*xi1*eta2*phi1 + 4*eta1*xi2*phi1 + 4*xi1*xi2*phi3 - 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 + 12*xi1*eta2*phi3 + 12*eta1*xi2*phi3 - 4*eta1*eta2*phi2 + 4*eta1*eta2*phi3 + 4*eta1*eta2*phi4 - 4*xi2*eta2*phi1 - 12*xi2*eta2*phi3 + 4*xi1*eta1*xi2*phi1 - 4*xi1*eta1*xi2*phi2 + 4*xi1*eta1*eta2*phi1 - 4*xi1*eta1*eta2*phi4 + 4*xi1*xi2*eta2*phi1 - 4*xi1*xi2*eta2*phi2 + 4*eta1*xi2*eta2*phi1 - 4*eta1*xi2*eta2*phi4 - 4*xi1*eta1*xi2*eta2*phi1 + 4*xi1*eta1*xi2*eta2*phi2 - 4*xi1*eta1*xi2*eta2*phi3 + 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4));
                        }
                    }
                    case 1:
                    {
                        if (mBilinearCase1)
                        {
                            return (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) - xi1*phi1 + xi1*phi2 - eta1*phi1 + xi1*phi3 - eta1*phi2 - xi1*phi4 + eta1*phi3 + eta1*phi4 + xi2*phi1 - xi2*phi2 + eta2*phi1 - xi2*phi3 + eta2*phi2 + xi2*phi4 - eta2*phi3 - eta2*phi4 + xi1*eta1*phi1 - xi1*eta1*phi2 + xi1*eta1*phi3 - xi1*eta1*phi4 - xi2*eta2*phi1 + xi2*eta2*phi2 - xi2*eta2*phi3 + xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2)) - (eta1 - xi1 + xi2 - eta2 + xi1*eta1 - xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 - 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 - 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 + 2*eta1*eta1*phi3 + 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 - 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 - 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 + 2*eta2*eta2*phi3 + 2*eta2*eta2*phi4 - 4*eta1*xi2*xi2*phi1 - 4*xi1*xi1*eta2*phi1 - 4*xi1*eta2*eta2*phi2 + 4*eta1*xi2*xi2*phi2 + 4*xi1*xi1*eta2*phi2 - 4*eta1*eta1*xi2*phi2 + 4*xi1*eta2*eta2*phi3 + 4*eta1*eta1*xi2*phi3 + 2*xi1*xi1*eta2*eta2*phi1 + 2*eta1*eta1*xi2*xi2*phi1 - 2*xi1*xi1*eta2*eta2*phi2 - 2*eta1*eta1*xi2*xi2*phi2 + 2*xi1*xi1*eta2*eta2*phi3 + 2*eta1*eta1*xi2*xi2*phi3 - 2*xi1*xi1*eta2*eta2*phi4 - 2*eta1*eta1*xi2*xi2*phi4 + 16*iso*xi1*eta1 - 16*iso*xi1*eta2 - 16*iso*eta1*xi2 + 16*iso*xi2*eta2 - 4*xi1*eta1*phi2 - 12*xi1*eta1*phi4 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 + 4*xi1*xi2*phi3 + 4*xi1*eta2*phi2 + 4*eta1*xi2*phi2 + 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 + 4*eta1*eta2*phi2 + 12*xi1*eta2*phi4 + 12*eta1*xi2*phi4 - 4*eta1*eta2*phi3 - 4*eta1*eta2*phi4 - 4*xi2*eta2*phi2 - 12*xi2*eta2*phi4 + 4*xi1*eta1*xi2*phi1 - 4*xi1*eta1*xi2*phi2 + 4*xi1*eta1*eta2*phi2 - 4*xi1*eta1*eta2*phi3 + 4*xi1*xi2*eta2*phi1 - 4*xi1*xi2*eta2*phi2 + 4*eta1*xi2*eta2*phi2 - 4*eta1*xi2*eta2*phi3 - 4*xi1*eta1*xi2*eta2*phi1 + 4*xi1*eta1*xi2*eta2*phi2 - 4*xi1*eta1*xi2*eta2*phi3 + 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4));
                        }
                        else
                        {
                            return (xi1 - eta1 - xi2 + eta2 - xi1*eta1 + xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 - 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 - 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 + 2*eta1*eta1*phi3 + 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 - 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 - 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 + 2*eta2*eta2*phi3 + 2*eta2*eta2*phi4 - 4*eta1*xi2*xi2*phi1 - 4*xi1*xi1*eta2*phi1 - 4*xi1*eta2*eta2*phi2 + 4*eta1*xi2*xi2*phi2 + 4*xi1*xi1*eta2*phi2 - 4*eta1*eta1*xi2*phi2 + 4*xi1*eta2*eta2*phi3 + 4*eta1*eta1*xi2*phi3 + 2*xi1*xi1*eta2*eta2*phi1 + 2*eta1*eta1*xi2*xi2*phi1 - 2*xi1*xi1*eta2*eta2*phi2 - 2*eta1*eta1*xi2*xi2*phi2 + 2*xi1*xi1*eta2*eta2*phi3 + 2*eta1*eta1*xi2*xi2*phi3 - 2*xi1*xi1*eta2*eta2*phi4 - 2*eta1*eta1*xi2*xi2*phi4 + 16*iso*xi1*eta1 - 16*iso*xi1*eta2 - 16*iso*eta1*xi2 + 16*iso*xi2*eta2 - 4*xi1*eta1*phi2 - 12*xi1*eta1*phi4 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 + 4*xi1*xi2*phi3 + 4*xi1*eta2*phi2 + 4*eta1*xi2*phi2 + 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 + 4*eta1*eta2*phi2 + 12*xi1*eta2*phi4 + 12*eta1*xi2*phi4 - 4*eta1*eta2*phi3 - 4*eta1*eta2*phi4 - 4*xi2*eta2*phi2 - 12*xi2*eta2*phi4 + 4*xi1*eta1*xi2*phi1 - 4*xi1*eta1*xi2*phi2 + 4*xi1*eta1*eta2*phi2 - 4*xi1*eta1*eta2*phi3 + 4*xi1*xi2*eta2*phi1 - 4*xi1*xi2*eta2*phi2 + 4*eta1*xi2*eta2*phi2 - 4*eta1*xi2*eta2*phi3 - 4*xi1*eta1*xi2*eta2*phi1 + 4*xi1*eta1*xi2*eta2*phi2 - 4*xi1*eta1*xi2*eta2*phi3 + 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4)) - (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) + xi1*phi1 - xi1*phi2 + eta1*phi1 - xi1*phi3 + eta1*phi2 + xi1*phi4 - eta1*phi3 - eta1*phi4 - xi2*phi1 + xi2*phi2 - eta2*phi1 + xi2*phi3 - eta2*phi2 - xi2*phi4 + eta2*phi3 + eta2*phi4 - xi1*eta1*phi1 + xi1*eta1*phi2 - xi1*eta1*phi3 + xi1*eta1*phi4 + xi2*eta2*phi1 - xi2*eta2*phi2 + xi2*eta2*phi3 - xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2));
                        }
                    }
                    case 2:
                    {
                        if (mBilinearCase1)
                        {
                            return - (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) - xi1*phi1 + xi1*phi2 - eta1*phi1 + xi1*phi3 - eta1*phi2 - xi1*phi4 + eta1*phi3 + eta1*phi4 + xi2*phi1 - xi2*phi2 + eta2*phi1 - xi2*phi3 + eta2*phi2 + xi2*phi4 - eta2*phi3 - eta2*phi4 + xi1*eta1*phi1 - xi1*eta1*phi2 + xi1*eta1*phi3 - xi1*eta1*phi4 - xi2*eta2*phi1 + xi2*eta2*phi2 - xi2*eta2*phi3 + xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2)) - (xi2 - eta1 - xi1 + eta2 - xi1*eta1 + xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 + 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 + 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 - 2*eta1*eta1*phi3 - 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 + 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 + 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 - 2*eta2*eta2*phi3 - 2*eta2*eta2*phi4 + 4*xi1*eta2*eta2*phi2 + 4*eta1*eta1*xi2*phi2 - 4*xi1*eta2*eta2*phi3 - 4*eta1*xi2*xi2*phi3 - 4*xi1*xi1*eta2*phi3 - 4*eta1*eta1*xi2*phi3 + 4*eta1*xi2*xi2*phi4 + 4*xi1*xi1*eta2*phi4 - 2*xi1*xi1*eta2*eta2*phi1 - 2*eta1*eta1*xi2*xi2*phi1 + 2*xi1*xi1*eta2*eta2*phi2 + 2*eta1*eta1*xi2*xi2*phi2 - 2*xi1*xi1*eta2*eta2*phi3 - 2*eta1*eta1*xi2*xi2*phi3 + 2*xi1*xi1*eta2*eta2*phi4 + 2*eta1*eta1*xi2*xi2*phi4 - 16*iso*xi1*eta1 + 16*iso*xi1*eta2 + 16*iso*eta1*xi2 - 16*iso*xi2*eta2 + 12*xi1*eta1*phi1 + 4*xi1*eta1*phi3 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 - 12*xi1*eta2*phi1 - 12*eta1*xi2*phi1 + 4*xi1*xi2*phi3 - 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 - 4*xi1*eta2*phi3 - 4*eta1*xi2*phi3 - 4*eta1*eta2*phi2 + 4*eta1*eta2*phi3 + 4*eta1*eta2*phi4 + 12*xi2*eta2*phi1 + 4*xi2*eta2*phi3 + 4*xi1*eta1*xi2*phi3 - 4*xi1*eta1*eta2*phi2 - 4*xi1*eta1*xi2*phi4 + 4*xi1*eta1*eta2*phi3 + 4*xi1*xi2*eta2*phi3 - 4*eta1*xi2*eta2*phi2 - 4*xi1*xi2*eta2*phi4 + 4*eta1*xi2*eta2*phi3 + 4*xi1*eta1*xi2*eta2*phi1 - 4*xi1*eta1*xi2*eta2*phi2 + 4*xi1*eta1*xi2*eta2*phi3 - 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4));
                        }
                        else
                        {
                            return (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) + xi1*phi1 - xi1*phi2 + eta1*phi1 - xi1*phi3 + eta1*phi2 + xi1*phi4 - eta1*phi3 - eta1*phi4 - xi2*phi1 + xi2*phi2 - eta2*phi1 + xi2*phi3 - eta2*phi2 - xi2*phi4 + eta2*phi3 + eta2*phi4 - xi1*eta1*phi1 + xi1*eta1*phi2 - xi1*eta1*phi3 + xi1*eta1*phi4 + xi2*eta2*phi1 - xi2*eta2*phi2 + xi2*eta2*phi3 - xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2)) + (xi1 + eta1 - xi2 - eta2 + xi1*eta1 - xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 + 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 + 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 - 2*eta1*eta1*phi3 - 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 + 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 + 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 - 2*eta2*eta2*phi3 - 2*eta2*eta2*phi4 + 4*xi1*eta2*eta2*phi2 + 4*eta1*eta1*xi2*phi2 - 4*xi1*eta2*eta2*phi3 - 4*eta1*xi2*xi2*phi3 - 4*xi1*xi1*eta2*phi3 - 4*eta1*eta1*xi2*phi3 + 4*eta1*xi2*xi2*phi4 + 4*xi1*xi1*eta2*phi4 - 2*xi1*xi1*eta2*eta2*phi1 - 2*eta1*eta1*xi2*xi2*phi1 + 2*xi1*xi1*eta2*eta2*phi2 + 2*eta1*eta1*xi2*xi2*phi2 - 2*xi1*xi1*eta2*eta2*phi3 - 2*eta1*eta1*xi2*xi2*phi3 + 2*xi1*xi1*eta2*eta2*phi4 + 2*eta1*eta1*xi2*xi2*phi4 - 16*iso*xi1*eta1 + 16*iso*xi1*eta2 + 16*iso*eta1*xi2 - 16*iso*xi2*eta2 + 12*xi1*eta1*phi1 + 4*xi1*eta1*phi3 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 - 12*xi1*eta2*phi1 - 12*eta1*xi2*phi1 + 4*xi1*xi2*phi3 - 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 - 4*xi1*eta2*phi3 - 4*eta1*xi2*phi3 - 4*eta1*eta2*phi2 + 4*eta1*eta2*phi3 + 4*eta1*eta2*phi4 + 12*xi2*eta2*phi1 + 4*xi2*eta2*phi3 + 4*xi1*eta1*xi2*phi3 - 4*xi1*eta1*eta2*phi2 - 4*xi1*eta1*xi2*phi4 + 4*xi1*eta1*eta2*phi3 + 4*xi1*xi2*eta2*phi3 - 4*eta1*xi2*eta2*phi2 - 4*xi1*xi2*eta2*phi4 + 4*eta1*xi2*eta2*phi3 + 4*xi1*eta1*xi2*eta2*phi1 - 4*xi1*eta1*xi2*eta2*phi2 + 4*xi1*eta1*xi2*eta2*phi3 - 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4));
                        }
                    }
                    case 3:
                    {
                        if (mBilinearCase1)
                        {
                            return (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) - xi1*phi1 + xi1*phi2 - eta1*phi1 + xi1*phi3 - eta1*phi2 - xi1*phi4 + eta1*phi3 + eta1*phi4 + xi2*phi1 - xi2*phi2 + eta2*phi1 - xi2*phi3 + eta2*phi2 + xi2*phi4 - eta2*phi3 - eta2*phi4 + xi1*eta1*phi1 - xi1*eta1*phi2 + xi1*eta1*phi3 - xi1*eta1*phi4 - xi2*eta2*phi1 + xi2*eta2*phi2 - xi2*eta2*phi3 + xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2)) + (eta1 - xi1 + xi2 - eta2 - xi1*eta1 + xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 - 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 - 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 + 2*eta1*eta1*phi3 + 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 - 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 - 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 + 2*eta2*eta2*phi3 + 2*eta2*eta2*phi4 + 4*xi1*eta2*eta2*phi1 + 4*eta1*eta1*xi2*phi1 - 4*eta1*xi2*xi2*phi3 - 4*xi1*xi1*eta2*phi3 - 4*xi1*eta2*eta2*phi4 + 4*eta1*xi2*xi2*phi4 + 4*xi1*xi1*eta2*phi4 - 4*eta1*eta1*xi2*phi4 - 2*xi1*xi1*eta2*eta2*phi1 - 2*eta1*eta1*xi2*xi2*phi1 + 2*xi1*xi1*eta2*eta2*phi2 + 2*eta1*eta1*xi2*xi2*phi2 - 2*xi1*xi1*eta2*eta2*phi3 - 2*eta1*eta1*xi2*xi2*phi3 + 2*xi1*xi1*eta2*eta2*phi4 + 2*eta1*eta1*xi2*xi2*phi4 - 16*iso*xi1*eta1 + 16*iso*xi1*eta2 + 16*iso*eta1*xi2 - 16*iso*xi2*eta2 + 12*xi1*eta1*phi2 + 4*xi1*eta1*phi4 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 + 4*xi1*xi2*phi3 - 12*xi1*eta2*phi2 - 12*eta1*xi2*phi2 + 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 + 4*eta1*eta2*phi2 - 4*xi1*eta2*phi4 - 4*eta1*xi2*phi4 - 4*eta1*eta2*phi3 - 4*eta1*eta2*phi4 + 12*xi2*eta2*phi2 + 4*xi2*eta2*phi4 - 4*xi1*eta1*eta2*phi1 + 4*xi1*eta1*xi2*phi3 - 4*xi1*eta1*xi2*phi4 + 4*xi1*eta1*eta2*phi4 - 4*eta1*xi2*eta2*phi1 + 4*xi1*xi2*eta2*phi3 - 4*xi1*xi2*eta2*phi4 + 4*eta1*xi2*eta2*phi4 + 4*xi1*eta1*xi2*eta2*phi1 - 4*xi1*eta1*xi2*eta2*phi2 + 4*xi1*eta1*xi2*eta2*phi3 - 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4));
                        }
                        else
                        {
                            return - (sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4) + xi1*phi1 - xi1*phi2 + eta1*phi1 - xi1*phi3 + eta1*phi2 + xi1*phi4 - eta1*phi3 - eta1*phi4 - xi2*phi1 + xi2*phi2 - eta2*phi1 + xi2*phi3 - eta2*phi2 - xi2*phi4 + eta2*phi3 + eta2*phi4 - xi1*eta1*phi1 + xi1*eta1*phi2 - xi1*eta1*phi3 + xi1*eta1*phi4 + xi2*eta2*phi1 - xi2*eta2*phi2 + xi2*eta2*phi3 - xi2*eta2*phi4)/((xi1 - xi2)*(eta1 - eta2)*std::pow(phi1 - phi2 + phi3 - phi4, 2)) - (xi1 - eta1 - xi2 + eta2 + xi1*eta1 - xi2*eta2 + (2*xi1*xi1*phi1 - 2*xi1*xi1*phi2 - 2*eta1*eta1*phi1 - 2*xi1*xi1*phi3 - 2*eta1*eta1*phi2 + 2*xi1*xi1*phi4 + 2*eta1*eta1*phi3 + 2*eta1*eta1*phi4 + 2*xi2*xi2*phi1 - 2*xi2*xi2*phi2 - 2*eta2*eta2*phi1 - 2*xi2*xi2*phi3 - 2*eta2*eta2*phi2 + 2*xi2*xi2*phi4 + 2*eta2*eta2*phi3 + 2*eta2*eta2*phi4 + 4*xi1*eta2*eta2*phi1 + 4*eta1*eta1*xi2*phi1 - 4*eta1*xi2*xi2*phi3 - 4*xi1*xi1*eta2*phi3 - 4*xi1*eta2*eta2*phi4 + 4*eta1*xi2*xi2*phi4 + 4*xi1*xi1*eta2*phi4 - 4*eta1*eta1*xi2*phi4 - 2*xi1*xi1*eta2*eta2*phi1 - 2*eta1*eta1*xi2*xi2*phi1 + 2*xi1*xi1*eta2*eta2*phi2 + 2*eta1*eta1*xi2*xi2*phi2 - 2*xi1*xi1*eta2*eta2*phi3 - 2*eta1*eta1*xi2*xi2*phi3 + 2*xi1*xi1*eta2*eta2*phi4 + 2*eta1*eta1*xi2*xi2*phi4 - 16*iso*xi1*eta1 + 16*iso*xi1*eta2 + 16*iso*eta1*xi2 - 16*iso*xi2*eta2 + 12*xi1*eta1*phi2 + 4*xi1*eta1*phi4 - 4*xi1*xi2*phi1 + 4*xi1*xi2*phi2 + 4*xi1*xi2*phi3 - 12*xi1*eta2*phi2 - 12*eta1*xi2*phi2 + 4*eta1*eta2*phi1 - 4*xi1*xi2*phi4 + 4*eta1*eta2*phi2 - 4*xi1*eta2*phi4 - 4*eta1*xi2*phi4 - 4*eta1*eta2*phi3 - 4*eta1*eta2*phi4 + 12*xi2*eta2*phi2 + 4*xi2*eta2*phi4 - 4*xi1*eta1*eta2*phi1 + 4*xi1*eta1*xi2*phi3 - 4*xi1*eta1*xi2*phi4 + 4*xi1*eta1*eta2*phi4 - 4*eta1*xi2*eta2*phi1 + 4*xi1*xi2*eta2*phi3 - 4*xi1*xi2*eta2*phi4 + 4*eta1*xi2*eta2*phi4 + 4*xi1*eta1*xi2*eta2*phi1 - 4*xi1*eta1*xi2*eta2*phi2 + 4*xi1*eta1*xi2*eta2*phi3 - 4*xi1*eta1*xi2*eta2*phi4)/(2*sqrt(xi1*xi1*eta2*eta2*phi1*phi1 - 2*xi1*xi1*eta2*eta2*phi1*phi2 + 2*xi1*xi1*eta2*eta2*phi1*phi3 - 2*xi1*xi1*eta2*eta2*phi1*phi4 + xi1*xi1*eta2*eta2*phi2*phi2 - 2*xi1*xi1*eta2*eta2*phi2*phi3 + 2*xi1*xi1*eta2*eta2*phi2*phi4 + xi1*xi1*eta2*eta2*phi3*phi3 - 2*xi1*xi1*eta2*eta2*phi3*phi4 + xi1*xi1*eta2*eta2*phi4*phi4 - 2*xi1*xi1*eta2*phi1*phi1 + 4*xi1*xi1*eta2*phi1*phi2 - 2*xi1*xi1*eta2*phi2*phi2 + 2*xi1*xi1*eta2*phi3*phi3 - 4*xi1*xi1*eta2*phi3*phi4 + 2*xi1*xi1*eta2*phi4*phi4 + xi1*xi1*phi1*phi1 - 2*xi1*xi1*phi1*phi2 - 2*xi1*xi1*phi1*phi3 + 2*xi1*xi1*phi1*phi4 + xi1*xi1*phi2*phi2 + 2*xi1*xi1*phi2*phi3 - 2*xi1*xi1*phi2*phi4 + xi1*xi1*phi3*phi3 - 2*xi1*xi1*phi3*phi4 + xi1*xi1*phi4*phi4 - 2*xi1*eta1*xi2*eta2*phi1*phi1 + 4*xi1*eta1*xi2*eta2*phi1*phi2 - 4*xi1*eta1*xi2*eta2*phi1*phi3 + 4*xi1*eta1*xi2*eta2*phi1*phi4 - 2*xi1*eta1*xi2*eta2*phi2*phi2 + 4*xi1*eta1*xi2*eta2*phi2*phi3 - 4*xi1*eta1*xi2*eta2*phi2*phi4 - 2*xi1*eta1*xi2*eta2*phi3*phi3 + 4*xi1*eta1*xi2*eta2*phi3*phi4 - 2*xi1*eta1*xi2*eta2*phi4*phi4 + 2*xi1*eta1*xi2*phi1*phi1 - 4*xi1*eta1*xi2*phi1*phi2 + 2*xi1*eta1*xi2*phi2*phi2 - 2*xi1*eta1*xi2*phi3*phi3 + 4*xi1*eta1*xi2*phi3*phi4 - 2*xi1*eta1*xi2*phi4*phi4 + 2*xi1*eta1*eta2*phi1*phi1 - 4*xi1*eta1*eta2*phi1*phi4 - 2*xi1*eta1*eta2*phi2*phi2 + 4*xi1*eta1*eta2*phi2*phi3 - 2*xi1*eta1*eta2*phi3*phi3 + 2*xi1*eta1*eta2*phi4*phi4 - 2*xi1*eta1*phi1*phi1 - 12*xi1*eta1*phi1*phi3 + 16*iso*xi1*eta1*phi1 + 2*xi1*eta1*phi2*phi2 + 12*xi1*eta1*phi2*phi4 - 16*iso*xi1*eta1*phi2 - 2*xi1*eta1*phi3*phi3 + 16*iso*xi1*eta1*phi3 + 2*xi1*eta1*phi4*phi4 - 16*iso*xi1*eta1*phi4 + 2*xi1*xi2*eta2*phi1*phi1 - 4*xi1*xi2*eta2*phi1*phi2 + 2*xi1*xi2*eta2*phi2*phi2 - 2*xi1*xi2*eta2*phi3*phi3 + 4*xi1*xi2*eta2*phi3*phi4 - 2*xi1*xi2*eta2*phi4*phi4 - 2*xi1*xi2*phi1*phi1 + 4*xi1*xi2*phi1*phi2 + 4*xi1*xi2*phi1*phi3 - 4*xi1*xi2*phi1*phi4 - 2*xi1*xi2*phi2*phi2 - 4*xi1*xi2*phi2*phi3 + 4*xi1*xi2*phi2*phi4 - 2*xi1*xi2*phi3*phi3 + 4*xi1*xi2*phi3*phi4 - 2*xi1*xi2*phi4*phi4 - 2*xi1*eta2*eta2*phi1*phi1 + 4*xi1*eta2*eta2*phi1*phi4 + 2*xi1*eta2*eta2*phi2*phi2 - 4*xi1*eta2*eta2*phi2*phi3 + 2*xi1*eta2*eta2*phi3*phi3 - 2*xi1*eta2*eta2*phi4*phi4 + 2*xi1*eta2*phi1*phi1 + 12*xi1*eta2*phi1*phi3 - 16*iso*xi1*eta2*phi1 - 2*xi1*eta2*phi2*phi2 - 12*xi1*eta2*phi2*phi4 + 16*iso*xi1*eta2*phi2 + 2*xi1*eta2*phi3*phi3 - 16*iso*xi1*eta2*phi3 - 2*xi1*eta2*phi4*phi4 + 16*iso*xi1*eta2*phi4 + eta1*eta1*xi2*xi2*phi1*phi1 - 2*eta1*eta1*xi2*xi2*phi1*phi2 + 2*eta1*eta1*xi2*xi2*phi1*phi3 - 2*eta1*eta1*xi2*xi2*phi1*phi4 + eta1*eta1*xi2*xi2*phi2*phi2 - 2*eta1*eta1*xi2*xi2*phi2*phi3 + 2*eta1*eta1*xi2*xi2*phi2*phi4 + eta1*eta1*xi2*xi2*phi3*phi3 - 2*eta1*eta1*xi2*xi2*phi3*phi4 + eta1*eta1*xi2*xi2*phi4*phi4 - 2*eta1*eta1*xi2*phi1*phi1 + 4*eta1*eta1*xi2*phi1*phi4 + 2*eta1*eta1*xi2*phi2*phi2 - 4*eta1*eta1*xi2*phi2*phi3 + 2*eta1*eta1*xi2*phi3*phi3 - 2*eta1*eta1*xi2*phi4*phi4 + eta1*eta1*phi1*phi1 + 2*eta1*eta1*phi1*phi2 - 2*eta1*eta1*phi1*phi3 - 2*eta1*eta1*phi1*phi4 + eta1*eta1*phi2*phi2 - 2*eta1*eta1*phi2*phi3 - 2*eta1*eta1*phi2*phi4 + eta1*eta1*phi3*phi3 + 2*eta1*eta1*phi3*phi4 + eta1*eta1*phi4*phi4 - 2*eta1*xi2*xi2*phi1*phi1 + 4*eta1*xi2*xi2*phi1*phi2 - 2*eta1*xi2*xi2*phi2*phi2 + 2*eta1*xi2*xi2*phi3*phi3 - 4*eta1*xi2*xi2*phi3*phi4 + 2*eta1*xi2*xi2*phi4*phi4 + 2*eta1*xi2*eta2*phi1*phi1 - 4*eta1*xi2*eta2*phi1*phi4 - 2*eta1*xi2*eta2*phi2*phi2 + 4*eta1*xi2*eta2*phi2*phi3 - 2*eta1*xi2*eta2*phi3*phi3 + 2*eta1*xi2*eta2*phi4*phi4 + 2*eta1*xi2*phi1*phi1 + 12*eta1*xi2*phi1*phi3 - 16*iso*eta1*xi2*phi1 - 2*eta1*xi2*phi2*phi2 - 12*eta1*xi2*phi2*phi4 + 16*iso*eta1*xi2*phi2 + 2*eta1*xi2*phi3*phi3 - 16*iso*eta1*xi2*phi3 - 2*eta1*xi2*phi4*phi4 + 16*iso*eta1*xi2*phi4 - 2*eta1*eta2*phi1*phi1 - 4*eta1*eta2*phi1*phi2 + 4*eta1*eta2*phi1*phi3 + 4*eta1*eta2*phi1*phi4 - 2*eta1*eta2*phi2*phi2 + 4*eta1*eta2*phi2*phi3 + 4*eta1*eta2*phi2*phi4 - 2*eta1*eta2*phi3*phi3 - 4*eta1*eta2*phi3*phi4 - 2*eta1*eta2*phi4*phi4 + xi2*xi2*phi1*phi1 - 2*xi2*xi2*phi1*phi2 - 2*xi2*xi2*phi1*phi3 + 2*xi2*xi2*phi1*phi4 + xi2*xi2*phi2*phi2 + 2*xi2*xi2*phi2*phi3 - 2*xi2*xi2*phi2*phi4 + xi2*xi2*phi3*phi3 - 2*xi2*xi2*phi3*phi4 + xi2*xi2*phi4*phi4 - 2*xi2*eta2*phi1*phi1 - 12*xi2*eta2*phi1*phi3 + 16*iso*xi2*eta2*phi1 + 2*xi2*eta2*phi2*phi2 + 12*xi2*eta2*phi2*phi4 - 16*iso*xi2*eta2*phi2 - 2*xi2*eta2*phi3*phi3 + 16*iso*xi2*eta2*phi3 + 2*xi2*eta2*phi4*phi4 - 16*iso*xi2*eta2*phi4 + eta2*eta2*phi1*phi1 + 2*eta2*eta2*phi1*phi2 - 2*eta2*eta2*phi1*phi3 - 2*eta2*eta2*phi1*phi4 + eta2*eta2*phi2*phi2 - 2*eta2*eta2*phi2*phi3 - 2*eta2*eta2*phi2*phi4 + eta2*eta2*phi3*phi3 + 2*eta2*eta2*phi3*phi4 + eta2*eta2*phi4*phi4)))/((xi1 - xi2)*(eta1 - eta2)*(phi1 - phi2 + phi3 - phi4));
                        }
                    }
                    default:
                    {
                        MORIS_ERROR(false, "A bilinear intersection node has only 4 ancestors");
                        return 0.0;
                    }
                }
            }
        }

        //--------------------------------------------------------------------------------------------------------------

        real Intersection_Node_Bilinear::get_local_coordinate(
                const Matrix<DDRMat>&       aFirstParentNodeLocalCoordinates,
                const Matrix<DDRMat>&       aSecondParentNodeLocalCoordinates,
                const Matrix<DDUMat>&       aAncestorNodeIndices,
                const Cell<Matrix<DDRMat>>& aAncestorNodeCoordinates,
                std::shared_ptr<Geometry>   aInterfaceGeometry,
                real                        aIsocontourThreshold)
        {
            // Checks
            MORIS_ASSERT(aFirstParentNodeLocalCoordinates.length() == 2,
                    "First parent of a bilinear intersection node must have 2 local coordinates (xi, eta).");
            MORIS_ASSERT(aSecondParentNodeLocalCoordinates.length() == 2,
                    "Second parent of a bilinear intersection node must have 2 local coordinates (xi, eta).");

            // Local coordinates
            xi1 = aFirstParentNodeLocalCoordinates(0);
            eta1 = aFirstParentNodeLocalCoordinates(1);
            xi2 = aSecondParentNodeLocalCoordinates(0);
            eta2 = aSecondParentNodeLocalCoordinates(1);

            // Geometry field values
            real phi1 = aInterfaceGeometry->get_field_value(aAncestorNodeIndices(0), aAncestorNodeCoordinates(0));
            real phi2 = aInterfaceGeometry->get_field_value(aAncestorNodeIndices(1), aAncestorNodeCoordinates(1));
            real phi3 = aInterfaceGeometry->get_field_value(aAncestorNodeIndices(2), aAncestorNodeCoordinates(2));
            real phi4 = aInterfaceGeometry->get_field_value(aAncestorNodeIndices(3), aAncestorNodeCoordinates(3));

            // Isocontour threshold
            real iso = aIsocontourThreshold;

            // Check to see if intersection needs to just be linear (3 cases)
            real tEpsilon = std::numeric_limits<real>::epsilon() * 10;
            mLinear = std::abs(phi1 - phi2 + phi3 - phi4) < tEpsilon or
                    std::abs(xi2 - xi1) < tEpsilon or
                    std::abs(eta2 - eta1) < tEpsilon;

            // Evaluate local coordinate in parent edge
            if (mLinear)
            {
                // TODO
                Matrix<DDRMat> tFirstBasisValues;
                Matrix<DDRMat> tSecondBasisValues;
                xtk::Quad_4_Basis_Function().evaluate_basis_function(aFirstParentNodeLocalCoordinates, tFirstBasisValues);
                xtk::Quad_4_Basis_Function().evaluate_basis_function(aSecondParentNodeLocalCoordinates, tSecondBasisValues);

                real tFirstParentPhi = tFirstBasisValues(0) * phi1 + tFirstBasisValues(1) * phi2 +
                        tFirstBasisValues(2) * phi3 + tFirstBasisValues(3) * phi4;
                real tSecondParentPhi = tSecondBasisValues(0) * phi1 + tSecondBasisValues(1) * phi2 +
                        tSecondBasisValues(2) * phi3 + tSecondBasisValues(3) * phi4;

                return (2 * iso - tFirstParentPhi - tSecondParentPhi) / (tSecondParentPhi - tFirstParentPhi);
            }
            else // Bilinear
            {
                real tValue1 = (sqrt(xi1 * xi1 * eta2 * eta2 * phi1 * phi1 - 2 * xi1 * xi1 * eta2 * eta2 * phi1 * phi2 + 2 * xi1 * xi1 * eta2 * eta2 * phi1 * phi3 - 2 * xi1 * xi1 * eta2 * eta2 * phi1 * phi4 + xi1 * xi1 * eta2 * eta2 * phi2 * phi2 - 2 * xi1 * xi1 * eta2 * eta2 * phi2 * phi3 + 2 * xi1 * xi1 * eta2 * eta2 * phi2 * phi4 + xi1 * xi1 * eta2 * eta2 * phi3 * phi3 - 2 * xi1 * xi1 * eta2 * eta2 * phi3 * phi4 + xi1 * xi1 * eta2 * eta2 * phi4 * phi4 - 2 * xi1 * xi1 * eta2 * phi1 * phi1 + 4 * xi1 * xi1 * eta2 * phi1 * phi2 - 2 * xi1 * xi1 * eta2 * phi2 * phi2 + 2 * xi1 * xi1 * eta2 * phi3 * phi3 - 4 * xi1 * xi1 * eta2 * phi3 * phi4 + 2 * xi1 * xi1 * eta2 * phi4 * phi4 + xi1 * xi1 * phi1 * phi1 - 2 * xi1 * xi1 * phi1 * phi2 - 2 * xi1 * xi1 * phi1 * phi3 + 2 * xi1 * xi1 * phi1 * phi4 + xi1 * xi1 * phi2 * phi2 + 2 * xi1 * xi1 * phi2 * phi3 - 2 * xi1 * xi1 * phi2 * phi4 + xi1 * xi1 * phi3 * phi3 - 2 * xi1 * xi1 * phi3 * phi4 + xi1 * xi1 * phi4 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi1 * phi1 + 4 * xi1 * eta1 * xi2 * eta2 * phi1 * phi2 - 4 * xi1 * eta1 * xi2 * eta2 * phi1 * phi3 + 4 * xi1 * eta1 * xi2 * eta2 * phi1 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi2 * phi2 + 4 * xi1 * eta1 * xi2 * eta2 * phi2 * phi3 - 4 * xi1 * eta1 * xi2 * eta2 * phi2 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi3 * phi3 + 4 * xi1 * eta1 * xi2 * eta2 * phi3 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi4 * phi4 + 2 * xi1 * eta1 * xi2 * phi1 * phi1 - 4 * xi1 * eta1 * xi2 * phi1 * phi2 + 2 * xi1 * eta1 * xi2 * phi2 * phi2 - 2 * xi1 * eta1 * xi2 * phi3 * phi3 + 4 * xi1 * eta1 * xi2 * phi3 * phi4 - 2 * xi1 * eta1 * xi2 * phi4 * phi4 + 2 * xi1 * eta1 * eta2 * phi1 * phi1 - 4 * xi1 * eta1 * eta2 * phi1 * phi4 - 2 * xi1 * eta1 * eta2 * phi2 * phi2 + 4 * xi1 * eta1 * eta2 * phi2 * phi3 - 2 * xi1 * eta1 * eta2 * phi3 * phi3 + 2 * xi1 * eta1 * eta2 * phi4 * phi4 - 2 * xi1 * eta1 * phi1 * phi1 - 12 * xi1 * eta1 * phi1 * phi3 + 16 * iso * xi1 * eta1 * phi1 + 2 * xi1 * eta1 * phi2 * phi2 + 12 * xi1 * eta1 * phi2 * phi4 - 16 * iso * xi1 * eta1 * phi2 - 2 * xi1 * eta1 * phi3 * phi3 + 16 * iso * xi1 * eta1 * phi3 + 2 * xi1 * eta1 * phi4 * phi4 - 16 * iso * xi1 * eta1 * phi4 + 2 * xi1 * xi2 * eta2 * phi1 * phi1 - 4 * xi1 * xi2 * eta2 * phi1 * phi2 + 2 * xi1 * xi2 * eta2 * phi2 * phi2 - 2 * xi1 * xi2 * eta2 * phi3 * phi3 + 4 * xi1 * xi2 * eta2 * phi3 * phi4 - 2 * xi1 * xi2 * eta2 * phi4 * phi4 - 2 * xi1 * xi2 * phi1 * phi1 + 4 * xi1 * xi2 * phi1 * phi2 + 4 * xi1 * xi2 * phi1 * phi3 - 4 * xi1 * xi2 * phi1 * phi4 - 2 * xi1 * xi2 * phi2 * phi2 - 4 * xi1 * xi2 * phi2 * phi3 + 4 * xi1 * xi2 * phi2 * phi4 - 2 * xi1 * xi2 * phi3 * phi3 + 4 * xi1 * xi2 * phi3 * phi4 - 2 * xi1 * xi2 * phi4 * phi4 - 2 * xi1 * eta2 * eta2 * phi1 * phi1 + 4 * xi1 * eta2 * eta2 * phi1 * phi4 + 2 * xi1 * eta2 * eta2 * phi2 * phi2 - 4 * xi1 * eta2 * eta2 * phi2 * phi3 + 2 * xi1 * eta2 * eta2 * phi3 * phi3 - 2 * xi1 * eta2 * eta2 * phi4 * phi4 + 2 * xi1 * eta2 * phi1 * phi1 + 12 * xi1 * eta2 * phi1 * phi3 - 16 * iso * xi1 * eta2 * phi1 - 2 * xi1 * eta2 * phi2 * phi2 - 12 * xi1 * eta2 * phi2 * phi4 + 16 * iso * xi1 * eta2 * phi2 + 2 * xi1 * eta2 * phi3 * phi3 - 16 * iso * xi1 * eta2 * phi3 - 2 * xi1 * eta2 * phi4 * phi4 + 16 * iso * xi1 * eta2 * phi4 + eta1 * eta1 * xi2 * xi2 * phi1 * phi1 - 2 * eta1 * eta1 * xi2 * xi2 * phi1 * phi2 + 2 * eta1 * eta1 * xi2 * xi2 * phi1 * phi3 - 2 * eta1 * eta1 * xi2 * xi2 * phi1 * phi4 + eta1 * eta1 * xi2 * xi2 * phi2 * phi2 - 2 * eta1 * eta1 * xi2 * xi2 * phi2 * phi3 + 2 * eta1 * eta1 * xi2 * xi2 * phi2 * phi4 + eta1 * eta1 * xi2 * xi2 * phi3 * phi3 - 2 * eta1 * eta1 * xi2 * xi2 * phi3 * phi4 + eta1 * eta1 * xi2 * xi2 * phi4 * phi4 - 2 * eta1 * eta1 * xi2 * phi1 * phi1 + 4 * eta1 * eta1 * xi2 * phi1 * phi4 + 2 * eta1 * eta1 * xi2 * phi2 * phi2 - 4 * eta1 * eta1 * xi2 * phi2 * phi3 + 2 * eta1 * eta1 * xi2 * phi3 * phi3 - 2 * eta1 * eta1 * xi2 * phi4 * phi4 + eta1 * eta1 * phi1 * phi1 + 2 * eta1 * eta1 * phi1 * phi2 - 2 * eta1 * eta1 * phi1 * phi3 - 2 * eta1 * eta1 * phi1 * phi4 + eta1 * eta1 * phi2 * phi2 - 2 * eta1 * eta1 * phi2 * phi3 - 2 * eta1 * eta1 * phi2 * phi4 + eta1 * eta1 * phi3 * phi3 + 2 * eta1 * eta1 * phi3 * phi4 + eta1 * eta1 * phi4 * phi4 - 2 * eta1 * xi2 * xi2 * phi1 * phi1 + 4 * eta1 * xi2 * xi2 * phi1 * phi2 - 2 * eta1 * xi2 * xi2 * phi2 * phi2 + 2 * eta1 * xi2 * xi2 * phi3 * phi3 - 4 * eta1 * xi2 * xi2 * phi3 * phi4 + 2 * eta1 * xi2 * xi2 * phi4 * phi4 + 2 * eta1 * xi2 * eta2 * phi1 * phi1 - 4 * eta1 * xi2 * eta2 * phi1 * phi4 - 2 * eta1 * xi2 * eta2 * phi2 * phi2 + 4 * eta1 * xi2 * eta2 * phi2 * phi3 - 2 * eta1 * xi2 * eta2 * phi3 * phi3 + 2 * eta1 * xi2 * eta2 * phi4 * phi4 + 2 * eta1 * xi2 * phi1 * phi1 + 12 * eta1 * xi2 * phi1 * phi3 - 16 * iso * eta1 * xi2 * phi1 - 2 * eta1 * xi2 * phi2 * phi2 - 12 * eta1 * xi2 * phi2 * phi4 + 16 * iso * eta1 * xi2 * phi2 + 2 * eta1 * xi2 * phi3 * phi3 - 16 * iso * eta1 * xi2 * phi3 - 2 * eta1 * xi2 * phi4 * phi4 + 16 * iso * eta1 * xi2 * phi4 - 2 * eta1 * eta2 * phi1 * phi1 - 4 * eta1 * eta2 * phi1 * phi2 + 4 * eta1 * eta2 * phi1 * phi3 + 4 * eta1 * eta2 * phi1 * phi4 - 2 * eta1 * eta2 * phi2 * phi2 + 4 * eta1 * eta2 * phi2 * phi3 + 4 * eta1 * eta2 * phi2 * phi4 - 2 * eta1 * eta2 * phi3 * phi3 - 4 * eta1 * eta2 * phi3 * phi4 - 2 * eta1 * eta2 * phi4 * phi4 + xi2 * xi2 * phi1 * phi1 - 2 * xi2 * xi2 * phi1 * phi2 - 2 * xi2 * xi2 * phi1 * phi3 + 2 * xi2 * xi2 * phi1 * phi4 + xi2 * xi2 * phi2 * phi2 + 2 * xi2 * xi2 * phi2 * phi3 - 2 * xi2 * xi2 * phi2 * phi4 + xi2 * xi2 * phi3 * phi3 - 2 * xi2 * xi2 * phi3 * phi4 + xi2 * xi2 * phi4 * phi4 - 2 * xi2 * eta2 * phi1 * phi1 - 12 * xi2 * eta2 * phi1 * phi3 + 16 * iso * xi2 * eta2 * phi1 + 2 * xi2 * eta2 * phi2 * phi2 + 12 * xi2 * eta2 * phi2 * phi4 - 16 * iso * xi2 * eta2 * phi2 - 2 * xi2 * eta2 * phi3 * phi3 + 16 * iso * xi2 * eta2 * phi3 + 2 * xi2 * eta2 * phi4 * phi4 - 16 * iso * xi2 * eta2 * phi4 + eta2 * eta2 * phi1 * phi1 + 2 * eta2 * eta2 * phi1 * phi2 - 2 * eta2 * eta2 * phi1 * phi3 - 2 * eta2 * eta2 * phi1 * phi4 + eta2 * eta2 * phi2 * phi2 - 2 * eta2 * eta2 * phi2 * phi3 - 2 * eta2 * eta2 * phi2 * phi4 + eta2 * eta2 * phi3 * phi3 + 2 * eta2 * eta2 * phi3 * phi4 + eta2 * eta2 * phi4 * phi4)- xi1 * phi1 + xi1 * phi2 - eta1 * phi1 + xi1 * phi3 - eta1 * phi2 - xi1 * phi4 + eta1 * phi3 + eta1 * phi4 + xi2 * phi1 - xi2 * phi2 + eta2 * phi1 - xi2 * phi3 + eta2 * phi2 + xi2 * phi4 - eta2 * phi3 - eta2 * phi4 + xi1 * eta1 * phi1 - xi1 * eta1 * phi2 + xi1 * eta1 * phi3 - xi1 * eta1 * phi4 - xi2 * eta2 * phi1 + xi2 * eta2 * phi2 - xi2 * eta2 * phi3 + xi2 * eta2 * phi4) / ((xi1 - xi2) * (eta1 - eta2) * (phi1 - phi2 + phi3 - phi4));
                real tValue2 = -(sqrt(xi1 * xi1 * eta2 * eta2 * phi1 * phi1 - 2 * xi1 * xi1 * eta2 * eta2 * phi1 * phi2 + 2 * xi1 * xi1 * eta2 * eta2 * phi1 * phi3 - 2 * xi1 * xi1 * eta2 * eta2 * phi1 * phi4 + xi1 * xi1 * eta2 * eta2 * phi2 * phi2 - 2 * xi1 * xi1 * eta2 * eta2 * phi2 * phi3 + 2 * xi1 * xi1 * eta2 * eta2 * phi2 * phi4 + xi1 * xi1 * eta2 * eta2 * phi3 * phi3 - 2 * xi1 * xi1 * eta2 * eta2 * phi3 * phi4 + xi1 * xi1 * eta2 * eta2 * phi4 * phi4 - 2 * xi1 * xi1 * eta2 * phi1 * phi1 + 4 * xi1 * xi1 * eta2 * phi1 * phi2 - 2 * xi1 * xi1 * eta2 * phi2 * phi2 + 2 * xi1 * xi1 * eta2 * phi3 * phi3 - 4 * xi1 * xi1 * eta2 * phi3 * phi4 + 2 * xi1 * xi1 * eta2 * phi4 * phi4 + xi1 * xi1 * phi1 * phi1 - 2 * xi1 * xi1 * phi1 * phi2 - 2 * xi1 * xi1 * phi1 * phi3 + 2 * xi1 * xi1 * phi1 * phi4 + xi1 * xi1 * phi2 * phi2 + 2 * xi1 * xi1 * phi2 * phi3 - 2 * xi1 * xi1 * phi2 * phi4 + xi1 * xi1 * phi3 * phi3 - 2 * xi1 * xi1 * phi3 * phi4 + xi1 * xi1 * phi4 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi1 * phi1 + 4 * xi1 * eta1 * xi2 * eta2 * phi1 * phi2 - 4 * xi1 * eta1 * xi2 * eta2 * phi1 * phi3 + 4 * xi1 * eta1 * xi2 * eta2 * phi1 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi2 * phi2 + 4 * xi1 * eta1 * xi2 * eta2 * phi2 * phi3 - 4 * xi1 * eta1 * xi2 * eta2 * phi2 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi3 * phi3 + 4 * xi1 * eta1 * xi2 * eta2 * phi3 * phi4 - 2 * xi1 * eta1 * xi2 * eta2 * phi4 * phi4 + 2 * xi1 * eta1 * xi2 * phi1 * phi1 - 4 * xi1 * eta1 * xi2 * phi1 * phi2 + 2 * xi1 * eta1 * xi2 * phi2 * phi2 - 2 * xi1 * eta1 * xi2 * phi3 * phi3 + 4 * xi1 * eta1 * xi2 * phi3 * phi4 - 2 * xi1 * eta1 * xi2 * phi4 * phi4 + 2 * xi1 * eta1 * eta2 * phi1 * phi1 - 4 * xi1 * eta1 * eta2 * phi1 * phi4 - 2 * xi1 * eta1 * eta2 * phi2 * phi2 + 4 * xi1 * eta1 * eta2 * phi2 * phi3 - 2 * xi1 * eta1 * eta2 * phi3 * phi3 + 2 * xi1 * eta1 * eta2 * phi4 * phi4 - 2 * xi1 * eta1 * phi1 * phi1 - 12 * xi1 * eta1 * phi1 * phi3 + 16 * iso * xi1 * eta1 * phi1 + 2 * xi1 * eta1 * phi2 * phi2 + 12 * xi1 * eta1 * phi2 * phi4 - 16 * iso * xi1 * eta1 * phi2 - 2 * xi1 * eta1 * phi3 * phi3 + 16 * iso * xi1 * eta1 * phi3 + 2 * xi1 * eta1 * phi4 * phi4 - 16 * iso * xi1 * eta1 * phi4 + 2 * xi1 * xi2 * eta2 * phi1 * phi1 - 4 * xi1 * xi2 * eta2 * phi1 * phi2 + 2 * xi1 * xi2 * eta2 * phi2 * phi2 - 2 * xi1 * xi2 * eta2 * phi3 * phi3 + 4 * xi1 * xi2 * eta2 * phi3 * phi4 - 2 * xi1 * xi2 * eta2 * phi4 * phi4 - 2 * xi1 * xi2 * phi1 * phi1 + 4 * xi1 * xi2 * phi1 * phi2 + 4 * xi1 * xi2 * phi1 * phi3 - 4 * xi1 * xi2 * phi1 * phi4 - 2 * xi1 * xi2 * phi2 * phi2 - 4 * xi1 * xi2 * phi2 * phi3 + 4 * xi1 * xi2 * phi2 * phi4 - 2 * xi1 * xi2 * phi3 * phi3 + 4 * xi1 * xi2 * phi3 * phi4 - 2 * xi1 * xi2 * phi4 * phi4 - 2 * xi1 * eta2 * eta2 * phi1 * phi1 + 4 * xi1 * eta2 * eta2 * phi1 * phi4 + 2 * xi1 * eta2 * eta2 * phi2 * phi2 - 4 * xi1 * eta2 * eta2 * phi2 * phi3 + 2 * xi1 * eta2 * eta2 * phi3 * phi3 - 2 * xi1 * eta2 * eta2 * phi4 * phi4 + 2 * xi1 * eta2 * phi1 * phi1 + 12 * xi1 * eta2 * phi1 * phi3 - 16 * iso * xi1 * eta2 * phi1 - 2 * xi1 * eta2 * phi2 * phi2 - 12 * xi1 * eta2 * phi2 * phi4 + 16 * iso * xi1 * eta2 * phi2 + 2 * xi1 * eta2 * phi3 * phi3 - 16 * iso * xi1 * eta2 * phi3 - 2 * xi1 * eta2 * phi4 * phi4 + 16 * iso * xi1 * eta2 * phi4 + eta1 * eta1 * xi2 * xi2 * phi1 * phi1 - 2 * eta1 * eta1 * xi2 * xi2 * phi1 * phi2 + 2 * eta1 * eta1 * xi2 * xi2 * phi1 * phi3 - 2 * eta1 * eta1 * xi2 * xi2 * phi1 * phi4 + eta1 * eta1 * xi2 * xi2 * phi2 * phi2 - 2 * eta1 * eta1 * xi2 * xi2 * phi2 * phi3 + 2 * eta1 * eta1 * xi2 * xi2 * phi2 * phi4 + eta1 * eta1 * xi2 * xi2 * phi3 * phi3 - 2 * eta1 * eta1 * xi2 * xi2 * phi3 * phi4 + eta1 * eta1 * xi2 * xi2 * phi4 * phi4 - 2 * eta1 * eta1 * xi2 * phi1 * phi1 + 4 * eta1 * eta1 * xi2 * phi1 * phi4 + 2 * eta1 * eta1 * xi2 * phi2 * phi2 - 4 * eta1 * eta1 * xi2 * phi2 * phi3 + 2 * eta1 * eta1 * xi2 * phi3 * phi3 - 2 * eta1 * eta1 * xi2 * phi4 * phi4 + eta1 * eta1 * phi1 * phi1 + 2 * eta1 * eta1 * phi1 * phi2 - 2 * eta1 * eta1 * phi1 * phi3 - 2 * eta1 * eta1 * phi1 * phi4 + eta1 * eta1 * phi2 * phi2 - 2 * eta1 * eta1 * phi2 * phi3 - 2 * eta1 * eta1 * phi2 * phi4 + eta1 * eta1 * phi3 * phi3 + 2 * eta1 * eta1 * phi3 * phi4 + eta1 * eta1 * phi4 * phi4 - 2 * eta1 * xi2 * xi2 * phi1 * phi1 + 4 * eta1 * xi2 * xi2 * phi1 * phi2 - 2 * eta1 * xi2 * xi2 * phi2 * phi2 + 2 * eta1 * xi2 * xi2 * phi3 * phi3 - 4 * eta1 * xi2 * xi2 * phi3 * phi4 + 2 * eta1 * xi2 * xi2 * phi4 * phi4 + 2 * eta1 * xi2 * eta2 * phi1 * phi1 - 4 * eta1 * xi2 * eta2 * phi1 * phi4 - 2 * eta1 * xi2 * eta2 * phi2 * phi2 + 4 * eta1 * xi2 * eta2 * phi2 * phi3 - 2 * eta1 * xi2 * eta2 * phi3 * phi3 + 2 * eta1 * xi2 * eta2 * phi4 * phi4 + 2 * eta1 * xi2 * phi1 * phi1 + 12 * eta1 * xi2 * phi1 * phi3 - 16 * iso * eta1 * xi2 * phi1 - 2 * eta1 * xi2 * phi2 * phi2 - 12 * eta1 * xi2 * phi2 * phi4 + 16 * iso * eta1 * xi2 * phi2 + 2 * eta1 * xi2 * phi3 * phi3 - 16 * iso * eta1 * xi2 * phi3 - 2 * eta1 * xi2 * phi4 * phi4 + 16 * iso * eta1 * xi2 * phi4 - 2 * eta1 * eta2 * phi1 * phi1 - 4 * eta1 * eta2 * phi1 * phi2 + 4 * eta1 * eta2 * phi1 * phi3 + 4 * eta1 * eta2 * phi1 * phi4 - 2 * eta1 * eta2 * phi2 * phi2 + 4 * eta1 * eta2 * phi2 * phi3 + 4 * eta1 * eta2 * phi2 * phi4 - 2 * eta1 * eta2 * phi3 * phi3 - 4 * eta1 * eta2 * phi3 * phi4 - 2 * eta1 * eta2 * phi4 * phi4 + xi2 * xi2 * phi1 * phi1 - 2 * xi2 * xi2 * phi1 * phi2 - 2 * xi2 * xi2 * phi1 * phi3 + 2 * xi2 * xi2 * phi1 * phi4 + xi2 * xi2 * phi2 * phi2 + 2 * xi2 * xi2 * phi2 * phi3 - 2 * xi2 * xi2 * phi2 * phi4 + xi2 * xi2 * phi3 * phi3 - 2 * xi2 * xi2 * phi3 * phi4 + xi2 * xi2 * phi4 * phi4 - 2 * xi2 * eta2 * phi1 * phi1 - 12 * xi2 * eta2 * phi1 * phi3 + 16 * iso * xi2 * eta2 * phi1 + 2 * xi2 * eta2 * phi2 * phi2 + 12 * xi2 * eta2 * phi2 * phi4 - 16 * iso * xi2 * eta2 * phi2 - 2 * xi2 * eta2 * phi3 * phi3 + 16 * iso * xi2 * eta2 * phi3 + 2 * xi2 * eta2 * phi4 * phi4 - 16 * iso * xi2 * eta2 * phi4 + eta2 * eta2 * phi1 * phi1 + 2 * eta2 * eta2 * phi1 * phi2 - 2 * eta2 * eta2 * phi1 * phi3 - 2 * eta2 * eta2 * phi1 * phi4 + eta2 * eta2 * phi2 * phi2 - 2 * eta2 * eta2 * phi2 * phi3 - 2 * eta2 * eta2 * phi2 * phi4 + eta2 * eta2 * phi3 * phi3 + 2 * eta2 * eta2 * phi3 * phi4 + eta2 * eta2 * phi4 * phi4) + xi1 * phi1 - xi1 * phi2 + eta1 * phi1 - xi1 * phi3 + eta1 * phi2 + xi1 * phi4 - eta1 * phi3 - eta1 * phi4 - xi2 * phi1 + xi2 * phi2 - eta2 * phi1 + xi2 * phi3 - eta2 * phi2 - xi2 * phi4 + eta2 * phi3 + eta2 * phi4 - xi1 * eta1 * phi1 + xi1 * eta1 * phi2 - xi1 * eta1 * phi3 + xi1 * eta1 * phi4 + xi2 * eta2 * phi1 - xi2 * eta2 * phi2 + xi2 * eta2 * phi3 - xi2 * eta2 * phi4) / ((xi1 - xi2) * (eta1 - eta2) * (phi1 - phi2 + phi3 - phi4));
                mBilinearCase1 = std::abs(tValue1) <= 1.0;

                return (mBilinearCase1 ? tValue1 : tValue2);
            }
        }

        //--------------------------------------------------------------------------------------------------------------
    
    }
}
