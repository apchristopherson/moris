namespace moris {

/** @defgroup OptInp Input File Functions for Optimization


@section Inp_create_opt_prob Initializing and Initiating an Optimization Solve
@include optimization/input_create_solve_opt_problem.inc

<B> Inputs: </B>
@code{.cpp}
std::string  aAlgorithm // optimization algorithm type
@endcode
<B> Outputs: </B>
@code{.cpp}
moris::real &               aObjective // objective value based on current advs
moris::Mat< moris::real > & aAdvVec    // current advs, size is ( number of advs, 1 )
@endcode

<B> Functionality </B> - This function acts as the interface between the unit test and the source code of MORIS. 
The Optimization Problem is defined here. After defining the optimization problem, we call the OptManager to 
solve the optimization system. A second Functionality of this function is to intialize the global variable 
moris::input::Algorithm.

<B> What the user needs to do </B> - Set the number of abstract design variables (aNumMasterAdvs),
the number of optimization criteria (aNumCriteria), the number of constraints (aNumConstraints), and the number of equality constraints. 
The optimization problem is defined using these variables. In the above example, the user is setting the following values:

@code{.cpp}
uint aNumMasterAdvs    = 1;
uint aNumCriteria      = 1;
uint aNumConstraints   = 1;
uint aNumEqConstraints = 0;
@endcode

******************************************************************************************************************

@section input_define_opt_strategy Defining the Optimization Strategy
@include optimization/input_define_opt_sol_strategy.inc

<B> Functionality </B> - This function allows the user to define the desired optimization strategy. The user can
do so by choosing an algorithm and setting the relevant algorithm parameters. The user has the flexibility to also create a sequence 
of algorithms for the optimization system to solve as shown above.

<B> What the user needs to do </B> - Create an optimization algorithm using the OptAlgAPI. The user then needs to set the relvant algorithm 
parameters as shown above. See @ref GCMMA and @ref Sweep for the available list of parameters and their defalut values. Finally the user returns the created 
algorithm or Cell of algorithms.

******************************************************************************************************************

@section input_define_advs Intializing the ADVs
@include optimization/input_define_advs.inc

<B> Outputs: </B>
@code{.cpp}
aAbsDesVarVec    // Initial values of the abstract design variables, size is ( number of advs, 1 )
aAbsDesVarVecUp  // Upper bounds of the abstract design variables, size is ( number of advs, 1 )
aAbsDesVarVecLow // Lower bounds of the abstract design variables, size is ( number of advs, 1 )
@endcode

<B> Functionality </B> - This function is used to set the intial values of the abstract design variables,
their upper bounds and lower bounds.

<B> What the user needs to do </B> - Set the intial values of the abstract design variables,
their upper bounds and lower bounds.

******************************************************************************************************************

@section input_define_criteria Defining the optimization criteria

This function will be used to define the set of optimization criteria relevant to the user's optimization system.
This is a placeholder as currently we explicitly compute the criteria in OptProb::compute_criteria(). The derivative
of this critera w.r.t. design variables is computed explicitly in OptProb::dcriteria_ds().

******************************************************************************************************************

@section input_get_criteria Evaluate the optimization criteria for analytical problems
@include optimization/input_get_criteria.inc

<B> Inputs: </B>
@code{.cpp}
aAbsDesVarVec // Initial values of the abstract design variables, size is ( number of advs, 1 )
@endcode
<B> Outputs: </B>
@code{.cpp}
aCriteria     // Vector of the set of criteria,  size is ( number of criteria, 1 ) 
@endcode

<B> Functionality </B> - This function will be used to evaluate the user defined criteria for analytical optimization problems.

<B> What the user needs to do </B> - Define the optimization criteria using the available set of ADVs.
In the current example, the optimization criteria is given by,

\f{eqnarray*}{
  criteria = x^2 \\
\f}

******************************************************************************************************************

@section input_get_dcriteria_ds Evaluate the gradient of the optimization criteria for analytical problems
@include optimization/input_get_dcriteria_ds.inc

<B> Inputs: </B>
@code{.cpp}
aAbsDesVarVec // Initial values of the abstract design variables, size is ( number of advs, 1 )
@endcode
<B> Outputs: </B>
@code{.cpp}
aGradCriteria // Vector of the set of criteria,  size is ( number of criteria, number of advs ) 
@endcode

<B> Functionality </B> - This function will be used to evaluate the gradient of the user defined criteria 
for analytical optimization problems.

<B> What the user needs to do </B> - Define the derivative of the criteria using the available set of ADVs.
In the current example, the derivative of the optimization criteria is given by,

\f{eqnarray*}{
  \frac {\partial (criteria) }{\partial (x)} = 2x \\
\f}

******************************************************************************************************************

@section input_get_obj_con Defining the Objective and Constraints
@include optimization/input_get_obj_con.inc

<B> Inputs: </B>
@code{.cpp}
aAbsDesVarVec // Initial values of the abstract design variables, size is ( number of advs, 1 )
aCriteria     // Vector of the set of criteria,  size is ( number of criteria, 1 ) 
@endcode
<B> Outputs: </B>
@code{.cpp}
aObjective    // Objective function
aConstraints  // Set of constraints,  size is ( number of constraints, 1 )
@endcode

<B> Functionality </B> - This function is used to define the objective function and the set of constraints

<B> What the user needs to do </B> - Define the objective and the constraints using the available set of ADVs
and optimization criteria. In the current example, the objective and constraints are given by,

\f{eqnarray*}{
  objective & = & 3* \mathbf x - x*criteria \quad ; \quad criteria = x^2 \\
  constraint & = & x - 2
\f}

******************************************************************************************************************

@section input_get_dobjcon_ds Explicit Derivative of Objective and Constraints w.r.t. ADVs
@include optimization/input_get_dobjcon_ds.inc

<B> Inputs: </B>
@code{.cpp}
aAbsDesVarVec // Initial values of the abstract design variables, size is ( number of advs, 1 )
aCriteria     // Vector of the set of criteria,  size is ( number of criteria, 1 ) 
@endcode
<B> Outputs: </B>
@code{.cpp}
aDObjective_Ds    // Explicit derivative of objective function w.r.t. ADVs, size is ( number of advs, 1 )
aDConstraints_Ds  // Explicit derivative of constraints w.r.t. ADVs, size is ( number of constraints, number of advs )
@endcode

<B> Functionality </B> - This function is used to define the explicit derivatives of the objective function the constraints w.r.t.
the ADVs.

<B> What the user needs to do </B> - Define the explicit derivative of the objective and the constraints w.r.t. the ADVs.
In the current example, the derivative of objective and constraints w.r.t. advs are given by,

\f{eqnarray*}{
  \frac {\partial (objective)}{\partial \mathbf x} & = & 3 - criteria \quad ; \quad criteria = x^2 \\
  \frac {\partial (constraint)}{\partial \mathbf x} & = & 1
\f}

******************************************************************************************************************

@section input_get_dobjcon_dcrit Explicit Derivative of Objective and Constraints w.r.t. Optimization Criteria
@include optimization/input_get_dobjcon_dcrit.inc

<B> Inputs: </B>
@code{.cpp}
aAbsDesVarVec // Initial values of the abstract design variables, size is ( number of advs, 1 )
aCriteria     // Vector of the set of criteria,  size is ( number of criteria, 1 ) 
@endcode
<B> Outputs: </B>
@code{.cpp}
aDObjective_DCrit    // Explicit derivative of objective function optimization criteria. ADVs, size is ( number of criteria, 1 )
aDConstraints_DCrit  // Explicit derivative of constraints w.r.t. optimization criteria, size is ( number of constraints, number of criteria )
@endcode

<B> Functionality </B> - This function is used to define the explicit derivatives of the objective function the constraints w.r.t.
the optimization criteria.

<B> What the user needs to do </B> - Define the explicit derivative of the objective and the constraints w.r.t. the optimization criteria.
In the above example, the derivative of objective and constraints w.r.t. optimization criteria are given by,

\f{eqnarray*}{
  \frac {\partial (objective) }{\partial (criteria)} & = & -x \\
  \frac {\partial (constraint)}{\partial (criteria)} & = & 0
\f}

*/
}
