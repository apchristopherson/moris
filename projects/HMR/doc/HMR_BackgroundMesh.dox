namespace moris {
namespace hmr {

#---------------------------------------------------------------------------
/** @defgroup HMR_Background_Mesh Background Mesh

Mesh adaption procedures are performed on the Background_Mesh. An HMR object has exactly one background mesh. The background mesh only contains elements, but does not store any nodes or basis. 

The "Domain" is a struc which serves as a lookup table for all ijk related question conceraning the global domain and the processor local subdomain. 

# Domain

The domain sruc stores lookup tables which contain relevant data concerning the uniform refined global as well as local domain. Such as:


<b> DomainIJK: </b> Array for each level containing the start and end IJK in each dimension without padding or aura. 

<b> AuraIJK: </b> The padding size is added to the DomainIJK.

<b> FrameIJK: </b> Subdomain local IJK positions in each dimenson with out padding or aura. In serial the FrameIJK is the same than DomainIJK.

<b> NumberOfElementsPerDimension: </b> Elements including padding. Used for the calculation of Ids

<b> LevelOffset: </b> The element offset ( including padding elements) between levels for a uniform refinement.

@image html DomainIJK_serial.png "Figure 1: In the presented example the DomainIJK would be calculated to [2,4], AuraIJK to [0,6] and FrameIJK to [2,4]. 
NumberOfElementsPerDimension is 7 and LevelOffset for this one dimensional problem is 0, 14, 28, ..."

The domain struc is filled with the information for every level. Since HMR uses a regular subdivision stratagy with a factor of 2 per dimension the higher levels differ from the previous level by a factor of 2.
All mentioned IJK positions are defined for every level seperately.

# Initialization

The background mesh is based on a hierarchical data structure, a quadtree in 2D and an octree in 3D, that manages active and refined elements of the mesh.
The class also contains all information on parallel mesh decomposition, and manages parallel communication. class is templated against the dimension, 2D or 3D.

When initializing the background mesh, the uniform, coarsest layer of elements on the proc including aura are generated.
Element pointers are stored. All elements are flagged active. Owning proc Id is not known at this stage.
  
subsequently all padding elements are identified and their onwership is calculated. Elements are identified which belong to the aura or inverse aura.
Aura elements are elements around the proc domain which belong to a neighboring proc and are shared with the current proc.
These elements are needed to calculate a correct B-spline basis or for the correct implementation of face oriented ghost stabilization.
Inverse aura elements are elements that belong to the current proc, and are shared with a neighbor. The knowlege about inverse aura elements reduces the communication.
Padding elements are not considered for the aura.

Elements gets collected and consecutive indices and ids are calculated.

# Background Element

 Elements are templated against $N$ the number of dimesnions, $C$ the number of children $2^N$, $B$ number of neugbours $N^N-1$ , $F$ number of faces $2N$ and  $E$ the number of edges $3D 12, 2D 0$

Member data:

<b> AciveFlag: </b> A list of bitsets for every refinement pattern which indicates if an element is active. 
Since normal bitsets need to know the length at compile time the number is limited to 8 but can be changed in the HMR_Globals.

<b> RefinedFlag: </b>  list of bitsets for every refinement pattern which indicates if an element is active.

<b> ChildBitset: </b> A bitset with size number of dimensions. Four combinations in 2D, 8 in 3D. Used as an index to identify the child in the quad/oc-tree.

<b> FacetOwnFlag: </b> Bitset with size number of facets. Indicates if facets are owned.


# Background Mesh Refinement

Elements are flagged to be adapted based on one or several user-defined criteria and on additional mesh regularity requirements.
Then refinement is carried out by splitting elements on a given level. 

Element can flagged for refinement based on a given criteria. In addition, a minimum refinement level can be defined. 
Based on the so called buffer region, additional elements are flagged. The buffer region is a refined region around an element which was initially flagged for refinement.
Its purpose is to maintain consistency of the mesh but also to increase the size of the refined region.
This user defined buffer size must be wide enough to match the B-spline support region. 
Changes in the minimum refinement criteria throughout re-meshing steps result in a coarsening effect.
The coarse to fine element edge ratio is 2 to 1. The following algorithm is used to flag and refine elements.

Refinements it perormed in two steps. Elements flagged for refinement are collected in a refinement queue. The queue is syncronized with neighboring processors.  Subsequently refniement is performed.

The procedure leading to the refinement of the mesh is summarized in the following algorithms for the primary and for the buffer region refinements.

\f[ \begin{algorithm}[ht]\center
    \begin{algorithmic}[1]
        \State{Set buffer size $d_{buffer}$}
        \State{Flag element for refinement}
        \State{Collect elements in queue for refinement}
        \While {change in refinement queue}
        \For{all elements in queue for refinement}
        \State{Apply refinement buffer algorithm~\ref{alg_refinementBuffer}}
        \State{Collect elements in queue for refinement}
        \EndFor
        \EndWhile
        \State{Refine elements in refinement queue}
        \If{element refinement level $< l_{min}$}
        \State{Flag element for refinement}
        \State{Refine element in refinement queue}
        \EndIf
    \end{algorithmic}        
    \caption{Refinement algorithm.}
    \label{alg_refinement}
\end{algorithm} \f]

\begin{algorithm}[ht]\center
    \begin{algorithmic}[1]
        \State{Get parent}
        \State{Get parent's neighbors in half buffer range $d_{buffer}/2$}
        \If{neighbor is active and not flagged for refinement}
        \State{Calculate distance $d_{max}$ between parent and neighbor}
        \If{$d_{max} < d_{buffer}$}
        \State{Flag neighbor for refinement}
        \State{Apply refinement buffer algorithm~\ref{alg_refinementBuffer} for neighbor}
        \EndIf
        \EndIf
    \end{algorithmic}        
    \caption{Refinement buffer algorithm.}
    \label{alg_refinementBuffer}
\end{algorithm}


<b> Refinement Patterns </b>

The concept of refinement patterns allows to store multiple refinement schemes on the same mesh object.
Before a refinement procedure can be started, the background mesh needs to be told which pattern is to be used.
 
The total number of available patterns, is hardcoded by the global parameter gNumberOfPatterns. It can be changed in the HMR_Globals

The refinement pattern that results from initialization or loading from a file is set on the input slot.
A refined or coarsened mesh is linked to the output slot.
The union mesh is used for the L2 projecting a field from the input mesh to the output mesh.
The special pattern is used for the Exodus II output, to solve the problem that cubic elements can be used by HMR, but not be visualized by Exodus: If a cubic interpolation is used on the output mesh,
the output pattern is cloned to the downsampling slot, and all elements are refined once more, and the new pattern is passed to an STK mesh that visualizes a quadratic mesh.


<b>Background %Element</b>

A background mesh contains background elements. Like the background mesh, a Background_Element does not contain any node objects. 

A Background %Element is defined by

- a pointer to its parent that is null if the element is on the coarsest level
- the refinement level of the element
- the proc local ijk-position of the element
- the domain wide xyz-position of the front lower left corner of the element
- the proc owner of the element ( owner ID is required for %STK output )
- a domain wide unique and position and level specific ID which is used for internal debugging and testing
- a continuous domain id that is exposed to %MTK ( only used if element is active )
- an index telling the position of the element in mAllElementsOnProc of the background mesh
- bitsets defining the activation and refined state of the element for each pattern
- a flag telling if the element is a padding element
- a flag telling if the element has child objects
- a flag telling if the element is marked for refinement
- an array of pointers containing the neighbors of the element. The neighbor array always refers to the currently selected activation pattern.

# Processor Decomposition Methods

This section will discuss the various processor decomposition schemes for
parallel computing. In general, MORIS has three distinct methods that can be
manipulated using \p mProcDecompMethod in hmr::Parameters:

1. User defined processor grid
2. Minimum processor interface
3. Minimum mesh interface

## Method: User Defined Processor Grid

- \p mProcDecompMethod = 0

This decomposition method allows the user to manually define the processor grid
used. The number of processors stipulated here must match the number of
processors that the code is run with. The processor grid is stipulated using
\p mProcessorDimensions in hmr::Parameters.

## Method: Minimum Processor Interface

- \p mProcDecompMethod = 1

This decomposition method creates a grid of processors to be as square as
possible. This method is independent of the underlying mesh dimensions and will
produce the same processor grid for the same number of processors using the
same number of dimensions. For example, if moris::par_size() = 4, then this
method will always produce a processor grid that is \f$ (N_x,N_y)=(2,2) \f$ for
all 2-D meshes. See Figure 1.

@image html Proc_Decomp_Method_1.png "Figure 1: Minimum Processor <!--
--> Interface Decomposition method with four processors and 8 by 2 mesh." <!--
--> width=700px

This decomposition method is handled by the external function \p MPI_Dims_create
within cl_Communication_Tools.hpp.

## Method: Minimum Mesh Interface

- \p mProcDecompMethod = 2

This decomposition method creates a grid of processors that minimizes the mesh
interface between adjacent processors. This method will create a grid of
processors that most represents the grid dimensions. Specifically, this method
determines an ideal processor grid layout (\f$ N_x,N_y,N_z \f$) that minimizes
the the interface count (\f$ I \f$) for specified mesh dimensions
(\f$ n_x,n_y,n_z \f$) and number of processors (\f$N\f$ or moris::par_size()).

<b> In 2-D: </b>

\f$ \min(I)=\min[n_y (N_x - 1) + n_x (N_y - 1)] \f$

Subject to: \f$ N_x N_y = N \f$

<b> In 3-D: </b>

\f$ \min(I)=\min[n_x n_y (N_z-1) + n_x n_z (N_y-1) + n_y n_z (N_x-1)] \f$

Subject to: \f$ N_x N_y N_z= N \f$

<b>2-D Example with 4 Processors: </b>

This decomposition method can be illustrated with the same
\f$(n_x,n_y)=(8,2)\f$ mesh in Figure 1. Figure 2 shows how this decomposition
method will reduce the number of mesh-to-mesh interfaces across processor
domains by using a processor grid of \f$(N_x,N_y)=(4,2)\f$

@image html Proc_Decomp_Method_2.png "Figure 2: Minimum Mesh Interface <!--
--> Decomposition method with four processors and 8 by 2 mesh." width=700px

*/
#---------------------------------------------------------------------------
}
}