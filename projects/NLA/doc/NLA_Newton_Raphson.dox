namespace moris {

/** @defgroup NLANewtonRaphson Newton Raphson

    The Newton Raphson method is and iterative rood finding algorithm based on an initial guess \f$ x_0 \f$. It is operating on the residual \f$ R_i(x_i) \f$ 
    and \f$ \frac{\partial R_i(x_i)}{\partial x_j} \f$
    
    The basic functionalities are inside of the newton loop are:
    
    Check for convergence. If converged break <br>
    e.g. \f$ \frac{\mid \mid R(x^{n+1}) \mid \mid}{\mid \mid R(x^{n}) \mid \mid} < tol \f$
    
    Build residual and Jacobian: <br>
    e.g. \f$ \frac{\partial R_i(x_i)}{\partial x_j} \f$ and \f$ R_i(x_i) \f$
    
    Solve linear system: <br>
    e.g. \f$ \frac{\partial R_i(x_i)}{\partial x_j} \cdot \delta x = R_i(x_i) \f$
    
    Update solution vector: <br>
    e.g. \f$ x^{n+1} = x^{n} \cdot \delta x \f$
    
    \code{.cpp}    
        Newton-Raphson loop for n
        
            check_tolerance()
            
            build_linear_problem()
            
            solve_linear_problem()
            
            update()
            
        end
    \endcode


*/
}
