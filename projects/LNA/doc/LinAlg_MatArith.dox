namespace moris {

/** @defgroup MatArith Matrix Arithmetic

@section MatOps Matrix Operations

This modules discusses matrix arithmetic in the @ref moris project.

Moris supports all of the typical matrix operations. Matrices can be added and 
substracted as expected. For example,

@code{.cpp}
A = B + C - D;
@endcode

will perform one addition and one substraction, as long as all the matrices are 
the correct size.
Other operations are the elementwise division and multiplication operations:

@code{.cpp}
C = A / B; // elementwise division
C = A % B; // elementwise multiplication
@endcode

Finally, the typical matrix multiplication uses the typical multiplication sign:

@code{.cpp}
C = A*B; // typical matrix multiplication
@endcode

Matrices can also be compared using logical operators, including > and ==. The 
syntax for all logical operations is as follows:

@code{.cpp}
C = (A > B);
@endcode

where @p > can replaced with any other operator. Note that A or B can be either 
a matrix or a scalar In this case, the matrix @p C is populated with 1's and 0's, 
for true and false statements, respectively. For a list of logical operators available, 
see the @ref moris namepsace page. Note that arithmetic and logical operators are 
declared with the word "operator"; thus, to find documentation for addition, search for
 "operator+" and for the > logical operator, search for "operator>".


@section MatSize Matrix Resizing

Should you wish to resize a matrix, moris features several functions related to
the size of a matrix:

@subsection MatSizeFunc The size Function

Mat::size() returns the size of the matrix as the total number of elements (i.e. 
the numer of rows times
the numer of columnes). To use this, you might call something like:

@code{.cpp}
moris::real mySize = myMatrix.size();
@endcode

@subsection MatSetSizeFunc The set_size Function

Mat::set_size resizing a matrix without caring about the elements in that 
matrix. You might use it by:

@code{.cpp}
moris::Mat A;
A.set_size(4, 5);
@endcode

Mat::set_size is the faster way to set the size of a matrix because it does not 
care about initializing
the elements in that matrix. This can be dangerous however, because you will 
then have unitilizes components!

@subsection MatResizeFunc The resize Function

Mat::resize resizing the matrix while keeping the elements in that matrix with 
respect to the top-left
corner. This is slower than set_size, but it might useful to keep old data. Keep 
in mind if you make the matrix
larger, then any new elements will be uninitialized!

@subsection MatCopysizeFunc The copysize Function

Mat::copy_size copies the size of a given matrix. Keep in mind that it does not 
copy the data in that given matrix (for that, you might use the copy constructor).

*/
}