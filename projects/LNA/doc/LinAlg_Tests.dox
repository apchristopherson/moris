namespace moris {

/** @defgroup LinAlgTests Linear Algebra Tests
Moris features several linear algebra functions, which are described in the previous section: Linear Algebra Functions. 
In this sub module we list all the test sections that verifies the validity of the functions implemented. Each functionality is 
tested using a separate .cpp test file named after the function and some of these test files have sections that test the functionalities 
in various ways. The main goal for this section is to list the functionalities tested. For more details on the tests refer to the test files.

/*! 
*  List of tests
*   - cl_Col.cpp:
*      -# checks moris::Mat as a real column vector
*
*   - cl_Mat.cpp:
*      -# verifies a real 3x3 moris::Mat
*      -# verifies a complex 3x3 moris::Mat
*      -# sets a size for real moris::Mat and fills it with a constructor
*      -# sets a size for complex moris::Mat and fills it with a constructor
*      -# verifies entries of a moris::Mat constructed with a pointer constructor
*      -# fills a real moris::Mat with .fill()
*      -# fills a complex moris::Mat with .fill()
*      -# tests a real moris::Mat on a column
*      -# tests a complex moris::Mat on a column
*      -# tests a real moris::Mat on columns (3x2 matrix)
*      -# tests a complex moris::Mat on columns (3x2 matrix)
*      -# tests a real moris::Mat on rows
*      -# tests a complex moris::Mat on rows
*      -# sets a matrix with .size() and verifies its size with .numel()
*      -# sets a moris::Tuple using .size() and verifies size by number of rows and columns
*      -# tests moris::Mat::span (real and complex)
*      -# verifies moris::Mat::eye to output the identity matrix of a specified size
*      -# changes size of a 3x3 to a 4x4 with .set_size and verifies it by counting number the of elements .numel() (real)
*      -# changes size of a using .reseize and verifies it by counting the of elements .numel() (complex)
*      -# uses moris::Mat::resize to make a matrix smaller and larger (real and complex)
*      -# verifies moris::Mat::copy_size by .numel() (real and complex)
*      -# verifies a moris::Mat matrix appending operation
*      -# verifies moris::Mat::min value and index wise
*      -# uses .mint() to extract minimum value, column and row indicies
*      -# verifies moris::Mat::max value and index wise
*      -# uses .mint() to extract maximum value, column and row indicies
*      -# tests element wise addition, subtraction, multiplication and devision of moris::Mat
*      -# Using Eigen performs moris::Mat performance tests using "+,-,*,/" operators
*      -# Using Arma performs moris::Mat performance tests using "+,-,*,/" operators
*
*   - cl_Row.cpp:
*      -# tests moris::Mat as a real row vector
*      
*   - cl_Sp_Mat.cpp:
*      -# verifies a real 3x3 moris::Sp_Mat
*      -# verifies a complex 3x3 moris::Sp_Mat
*      -# tests a real moris::Sp_Mat on a column
*      -# tests a complex moris::Sp_Mat on a column
*      -# tests a real moris::Sp_Mat on columns (3x2 matrix)
*      -# tests a complex moris::Sp_Mat on columns (3x2 matrix)
*      -# tests a real moris::Sp_Mat on rows
*      -# tests a coplex moris::Sp_Mat on rows
*
*   - cl_Tensor.cpp:
*      -# copies a real moris::Tensor and checking the order
*      -# performs an inner product on a tensor
*      -# multiplies two moris::Tensor (4-2,3-1 and 2-1 product)
*      -# performs a 3D speed test on a moris::Tensor
*
*   - fn_chol_l.cpp
*      -# performs a lower Cholesky decomposition on a real moris::Mat using moris::chol
*
*   - fn_chol_u.cpp
*      -# performs an upper Cholesky decomposition on a real moris::Mat using moris::cholu
*
*   - fn_cond.cpp
*      -# computes the condition number of a real moris::Mat
*
*   - fn_det.cpp
*      -# performs the determinant on a real moris::Mat
*
*   - fn_eig_gen.cpp
*      -# performs the eigenvalue problem on a real moris::Mat
*
*   - fn_eig_sym.cpp
*      -# performs the eigenvalue problem on a real moris::Mat without checking the signs
*
*   - fn_eye.cpp
*      -# verifies moris::eye produces the identity of a given size
*
*   - fn_inv.cpp
*      -# tests moris::inv on a real moris::Mat
*
*   - fn_iscol.cpp
*      -# tests if moris::iscol returns the correct boolian if the input is a column: (real and complex)
*
*   - fn_isempty.cpp
*      -# tests if moris::isempty returns the correct boolian if moris::Mat or is has no values and hence empty (real and complex)
*
*   - fn_isfinite.cpp
*      -# tests moris::isfinite (returns a boolian) on moris::Mat and moris::Cell (real and complex) 
*
*   - fn_isrow.cpp
*      -# tests if moris::isrow returns the correct boolian if the input is a column (complex)
*
*   - fn_issquare.cpp
*      -# tests moris::issquare (returns a boolian) on a real moris::Mat
*
*   - fn_isvector.cpp
*      -# tests moris::isvector (returns a boolian) on a real moris::Mat
*
*   - fn_linsolve.cpp
*      -# solves a moris::Mat system Ax=B using moris::solve (real and complex)
*      -# solves a moris::Sp_Mat system Ax=B using moris::solve (real and complex)
*
*   - fn_linspace.cpp
*      -# verifies values of moris::linspace 
*
*   - fn_lu.cpp
*      -# performs an LU decomposition using moris::Lu on a real moris::Mat
*
*   - fn_mem_pointer.cpp
*      -# verifies correct pointer using mem_pointer() to extract pointer from a real moris::Mat then tests it by subtracting the value from the respective value pf the pointer
*
*   - fn_qr.cpp
*      -# performs a Qr decomposition using moris::qr on a real square moris::Mat
*      -# performs a Qr decomposition using moris::qr on a real non-square moris::Mat
*
*   - fn_svd.cpp
*      -# tests svd decomposition functionality using moris::svd on a moris::Mat (real and complex)
*
*   - fn_trans.cpp
*      -# verifies transpose operation using moris::trans on both moris:Mat and moris:Sp_Mat (real and complex)
*
*   - op_elementwise_div.cpp
*      -# tests the elementwise division with the "/" operator. Test performed using a moris:Mat and a constant (real and complex)
*
*   - op_elementwise_mult.cpp
*      -# tests the elementwise multiplication with the "*" operator a real moris:Mat
*
*   - op_equal_equal.cpp
*      -# tests equal_equal operator "==" operator on a moris::Mat
*
*   - op_greater_equal.cpp
*      -# tests greater than or equal "=>" operator on a moris::Mat
*
*   - op_greater.cpp
*      -# tests greater than">" operator on a moris::Mat
*
*   - op_less_equal.cpp
*      -# tests less than or equal "=<" operator on a moris::Mat
*
*   - op_less.cpp
*      -# tests less than "<" operator on a moris::Mat
*
*   - op_minus.cpp
*      -# tests operator minus "-" on moris::Mat
*      -# tests operator minus "-" on moris::Sp_Mat
*
*   - op_not_equal.cpp
*      -# tests operator not equal "!=" on moris::Mat
*
*   - op_plus.cpp
*      -# tests operator plus "+" on real moris::Mat
*      -# tests operator plus "+" on complex moris::Mat
*      -# tests operator plus "+" on real moris::Sp_Mat
*      -# tests operator plus "+" on complex moris::Sp_Mat
*      -# NEED TO CLEAN FILE
*
*   - op_times.cpp
*      -# tests operator times "*" on moris::Mat
*      -# tests operator times "*" on moris::Sp_Mat
*
*   - perf_cl_Mat.cpp
*      -# contains performance tests on arma::Mat class  of armadillo
*      -# contains performance tests on tMatrix class of Eigen
*      -# tests performed are "+,-,*,/" operators and .transpose()
*
*   - perf_cl_Sp_Mat.cpp
*      -# contains performance tests on arma::SpMat class  of armadillo
*      -# contains performance tests on Eigen::sparseMatrix class of Eigen
*      -# tests performed are "+,-,*,/" operators and .transpose()
*
*/
}
