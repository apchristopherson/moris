namespace moris {
namespace fem {

/** @defgroup FE_Compressible_NS Compressible Navier-Stokes Equations.

Compressible Navier-Stokes equations with ideal and Van-der-Waals (Korteweg) fluid constitutive models.

# Introduction
The compressible Navier-Stokes have been implemented along side two constitutive models to describe the flow of a 
compressible flow at low Reynolds numbers (FEM discretization is instable at higher Reynolds numbers).
The primitive variables \f$ \density \f$, \f$ \velocity \f$, and \f$ \temp \f$, are used as the field variables. 
Two constitutive models have been implemented along side of it: a simple ideal gas model, and a Van-der-Waals fluid model.
Using the latter results in the so-called thermal Navier-Stokes-Korteweg equations, which can be used to describe the flow 
of a single component fluid material with multiple states of mater (e.g. water and vapor). This physics has been 
implemented in an effort to solve a problem with boiling phase change material for energy storage.

NOTE: The constitutive models assume that all temperatures are given as absolute temperatures, i.e. in Kelvin.
 
-------------------------------------------------------------------------------------------------------------------------- 
# Governing Equations

The set of governing equations in their strong form for the space time domain 
\f$ \domain = \SpaceDomain \times \TimeDomain \f$ are:

Conservation of mass:
\f[
\pfrac{\density}{\time} + \div{(\density \velocity)} 
= 0 \ \ \ in  \ \domain
\f]

Conservation of momentum:
\f[
\pfrac{(\density \velocity)}{\time} + \div{(\density \velocity \otimes \velocity)} 
- \div{\CauchyStress} - \density \BodyForce
= 0 \ \ \ in  \ \domain
\f]

Conservation of Energy:
\f[
\pfrac{\TotalEnergyDensity}{\time} 
+ \div{(\EnergyFlux - \WorkFlux)} 
+ \div{\ThermalFlux} 
- \density \BodyForce \cdot \velocity 
- \BodyLoad
= 0 \ \ \ in  \ \domain
\f]
where \f$ \EnergyFlux \f$ and \f$ \WorkFlux \f$ denote the advective flux of energy 
and the flux of mechanical work respectively. Generally, \f$ \EnergyFlux = \TotalEnergyDensity \velocity \f$ 
and \f$ \WorkFlux = \CauchyStress \velocity \f$.

The initial conditions are defined as follows:

\f[
\begin{split}
\density(\space,\time=0) = \density_0(\space) \ \ \ on \ \SpaceDomain   \\
\velocity(\space,\time=0) = \velocity_0(\space) \ \ \ on \ \SpaceDomain \\
\temp(\space,\time=0) = \temp_0(\space) \ \ \ on \ \SpaceDomain
\end{split}
\f]

with the boundary conditions being:

\f[
\grad{\density} \cdot \SurfaceNormal = 0 \ \ \ on \ \SpaceBoundary
\f]

 What else ???????????????????????

--------------------------------------------------------------------------------------------------------------------------
# Constitutive Models

## Ideal Gas Model
Using the ideal gas equation, the pressure \f$ \pressure \f$ can be computed as

\f[
\pressure(\density,\temp) = \density \GasConst \temperature 
\f]

where \f$ \GasConst \f$ is the specific gas constant as usually used for engineering applications. 
It can be computed using the universal gas constant and the molar mass of the fluid using the expression

\f[
\GasConst = \frac{\UniversalGasConstant}{\MolarMass}
\f]

The total energy density is computed as follows 

\f[
\TotalEnergyDensity = \density \left( \SpecificInnerEnergy + \frac{\abs{\velocity}^2}{2} \right)
\f]

where the specific inner energy is

\f[
\SpecificInnerEnergy = ( \IsobarHeatCap - \GasConst ) \temperature
\f]

The thermal flux is defined as

\f[
\ThermalFlux = - \ThermalConductivity \grad{\temp}
\f]

Finally the Cauchy stress tensor is computed as

\f[
\CauchyStress 
= \ViscousStress - \pressure \IdentityMat 
= \left[ 
\DynamicViscosity \left( \grad{\velocity} + \trans{\grad{\velocity}} \right) 
+ \KinematicViscosity (\div{\velocity}) \IdentityMat
\right] - \pressure \IdentityMat
\f]

The energy fluxes are defined as
\f[ \EnergyFlux = \TotalEnergyDensity \velocity \f] 
and
\f[ \WorkFlux = \CauchyStress \velocity \f]

where Stokes' assumption \f$ \KinematicViscosity = - \frac{2}{3} \DynamicViscosity \f$ is used.

To use this constitutive model, the following three properties need to be defined:
-# the isobaric heat capacity \f$ \IsobarHeatCap \f$ (Keyword: "IsobaricHeatCapacity")
-# the specific gas constant \f$ \GasConst \f$, and (Keyword: "SpecificGasConstant")
-# the dynamic viscosity \f$ \DynamicViscosity \f$ of the fluid used (Keyword: "DynamicViscosity")


## Thermal Van-der-Waals (Korteweg) Model

A Van-der-Waals (VdW) fluid model was adapted to model the thermal fluid. The fluid model has been adapted from Keunsoo 
Park's 2017 paper.This fluid model is based on the assumption that the thermodynamic potential of the Helmholtz free 
energy is minimized everywhere. The local Helmholtz free energy density based on the VdW equation of state is given as

\f[
\LocalHelmholtzFreeEnergyDensity(\density,\temp) = 
- \VdWconstA \density 
+ \GasConst \temp \ln{\frac{\density}{\VdWconstB - \density}}
- \IsochorHeatCap \temp \ln{\frac{\temp}{\RefTemp}}
- \IsochorHeatCap \temp
\f]

This potential has two minima ("wells") close to the critical point, i.e. the point of phase change. 
This leads to two stable states, one in each phase. An unmodified implementation of this formulation of the free energy 
would require the tracking and treatment of the resulting sharp interface between the two phases, to obtain a stable 
formulation.For this implementation, however, a phase field (PF) approach -- like the one for the thermal diffusion model 
with phase change -- was choosen. To smear out the interface of the two phase regions, the local Helmholtz free energy 
density is augmented with a regularization term involving the capillarity coefficient \f$ \capillarity \f$ and the 
gradient of the order parameter. Since the density contains the information needed to determine the phase state, it is 
used as the order parameter, avoiding the need to separatly compute the order parameter.
This then leads to the following formulation for the total Helmholtz free energy density, which is then minimized.

\f[
\HelmholtzFreeEnergyDensity(\density,\temp) = \LocalHelmholtzFreeEnergyDensity(\density,\temp) 
+ \frac{\capillarity}{2 \density} \abs{\grad{\density}}^2
\f]

Using the Van-der-Waals equation of state, the thermodynamic pressure \f$ \pressure \f$ is defined as

\f[
\pressure(\density,\temp) = 
\GasConst \VdWconstB \frac{\density \temp}{\VdWconstB - \density} 
- \VdWconstA \density^2
\f]


where \f$ \GasConst \f$ is the specific gas constant as usually used for engineering applications. 
It can be computed using the universal gas constant and the molar mass using the expression

\f[
\GasConst = \frac{\UniversalGasConstant}{\MolarMass}
\f]

The total energy density is computed as follows 
\f[
\TotalEnergyDensity = 
\density \left( \SpecificInnerEnergy + \frac{\abs{\velocity}^2}{2} \right) + \frac{\capillarity}{2} \abs{\velocity}^2
\f]
where the specific inner energy is
\f[
\SpecificInnerEnergy = \IsochorHeatCap \temp - \VdWconstA \density
\f]

The thermal flux is defined as
\f[
\ThermalFlux 
= - \ThermalConductivity \grad{\temp} 
\f]


Finally the Cauchy stress tensor is computed as
\f[
\CauchyStress 
= \ViscousStress + \KortewegStress - \pressure \IdentityMat 
= \left[ 
\DynamicViscosity \left( \grad{\velocity} + \trans{\grad{\velocity}} \right) 
+ \KinematicViscosity (\div{\velocity}) \IdentityMat
\right] + \left[ 
\left( \capillarity \density \laplacian{\density} 
+ \frac{\capillarity \abs{\grad{\density}}^2}{2} \right) \IdentityMat 
- \capillarity \grad{\density} \otimes \grad{\density} 
\right] 
- \pressure \IdentityMat
\f]
where \f$ \KortewegStress \f$ is called the Korteweg stress. 
Again, Stokes' assumption \f$ \KinematicViscosity = - \frac{2}{3} \DynamicViscosity \f$ is used.


The energy fluxes are defined as
\f[ 
\EnergyFlux = \TotalEnergyDensity \velocity 
\f] 
and
\f[ 
\WorkFlux 
= \CauchyStress \velocity - \InterstitialWorkFlux 
= \CauchyStress \velocity - \left[ \capillarity \density  \left( \div{\velocity} \right) \grad{\density} \right]
\f]
where \f$ \InterstitialWorkFlux \f$ is called the interstitial working flux which accounts for the compressibility 
effects introduced by the phase change.

To use this constitutive model, the following six properties need to be defined:
-# the isochoric heat capacity \f$ \IsochorHeatCap \f$ (Keyword: "IsochoricHeatCapacity")
-# the first Van-der-Waals constant \f$ \VdWconstA \f$ (Keyword: "FirstVdWconstant")
-# the second Van-der-Waals constant \f$ \VdWconstB \f$ (Keyword: "SecondVdWconstant")
-# the capillarity coefficient \f$ \capillarity \f$ (Keyword: "Capillarity")
-# the specific gas constant \f$ \GasConst \f$, and (Keyword: "SpecificGasConstant")
-# the dynamic viscosity \f$ \DynamicViscosity \f$ of the fluid used (Keyword: "DynamicViscosity")


--------------------------------------------------------------------------------------------------------------------------
# Stabilization

For this physics model, no stabilization has been implemented, yet.

--------------------------------------------------------------------------------------------------------------------------
# Bulk IWGs

After deriving the weak form, the following weak form of the governing equations for the bulk is obtained.

## Mass Conservation
\f[
\int_{\domain} \DensTestFunc \dot{\density} \ d\domain 
- \int_{\domain} \grad{\DensTestFunc} \cdot (\density \velocity) \ d\domain 
= \Residual_{\DensTestFunc} \ShouldEqual 0 \ \ \ in  \ \domain
\f]
where \f$ \DensTestFunc \f$ is the density test function.
This IWG is implemented in IWG_Compressible_NS_Density_Bulk and 
corresponds to the enum IWG_Type::COMPRESSIBLE_NS_DENSITY_BULK in the IWG factory.

## Momentum Equation
\f[
\int_{\domain} \VelTestFunc \cdot \left( \dot{\density} \velocity + \density \dot{\velocity} \right) \ d\domain 
- \int_{\domain} \left( \density \velocity \otimes \velocity \right) \DoubleDot \grad{\VelTestFunc} \ d\domain 
+ \int_{\domain} \CauchyStress \DoubleDot \grad{\VelTestFunc} \ d\domain 
- \int_{\domain} \VelTestFunc \cdot \density \BodyForce \ d\domain
= \Residual_{\VelTestFunc} \ShouldEqual 0 \ \ \ in  \ \domain 
\f]
where \f$ \VelTestFunc = \trans{(\TestFunc_{ux}, \TestFunc_{uz}, \TestFunc_{uz})} \f$ is the velocity test function.
This IWG is implemented in IWG_Compressible_NS_Velocity_Bulk and 
corresponds to the enum IWG_Type::COMPRESSIBLE_NS_VELOCITY_BULK in the IWG factory.

## Energy Equation
\f[
\int_{\domain} \TempTestFunc \dot{\TotalEnergyDensity} \ d\domain 
+ \int_{\domain} \grad{\TempTestFunc} \cdot \left[ \WorkFlux - \EnergyFlux
                       - \ThermalFlux \right] \ d\domain 
+ \int_{\domain} \TempTestFunc \left[ \density \BodyForce \cdot \velocity + \BodyLoad \right] \ d\domain 
= \Residual_{\TempTestFunc} \ShouldEqual 0 \ \ \ in  \ \domain
\f]
where \f$ \TempTestFunc \f$ is the temperature test function.
This IWG is implemented in IWG_Compressible_NS_Temperature_Bulk and 
corresponds to the enum IWG_Type::COMPRESSIBLE_NS_TEMPERATURE_BULK in the IWG factory.

## Remarks
To use this Bulk IWGs, the following two properties need to be defined:
-# the body force vector \f$ \BodyForce \f$ (unit: force per unit mass) (Keyword: "BodyForce")
-# the volumetric heat load \f$ \BodyLoad \f$ (unit: power per unit volume) (Keyword: "BodyLoad")

--------------------------------------------------------------------------------------------------------------------------
# Boundary IWGs

## Boundary Terms in the Weak Form
When deriving the weak form with the bulk terms in the above section, the following boundary terms appear in the weak form.

### Mass Conservation
\f[
\Residual_{B\density} = 
\int_{\DomainBoundary} \DensTestFunc (\density \velocity \cdot \SurfaceNormal) \ d\BoundarySegment
\f]

### Momentum Conservation
\f[
\Residual_{B\velocity} =
\int_{\DomainBoundary} \VelTestFunc \left[ ( \density \velocity \otimes \velocity ) \cdot \SurfaceNormal \right] \ d\BoundarySegment 
+ \int_{\DomainBoundary} \VelTestFunc ( \CauchyStress \cdot \SurfaceNormal ) \ d\BoundarySegment
\f]

### Energy Conservation
\f[
\Residual_{B\temp} =
\int_{\DomainBoundary} \TempTestFunc (\ThermalFlux \cdot \SurfaceNormal ) \ d\BoundarySegment 
- \int_{\DomainBoundary} \TempTestFunc \left[ 
( \EnergyFlux - \WorkFlux ) \cdot \SurfaceNormal \right] \ d\BoundarySegment
\f]


## Boundary IWGs 

### Advective Mass Flux Boundary IWG 
\f[
\Residual_{BF\velocity} =
\int_{\DomainBoundary} \VelTestFunc \left[ ( \density \velocity \otimes \velocity ) \cdot \SurfaceNormal \right] \ d\BoundarySegment 
\f]

### Advective Energy Flux Boundary IWG 
\f[
\Residual_{BF\temp} =
\int_{\DomainBoundary} \TempTestFunc \left[ 
+ ( \EnergyFlux - \WorkFlux ) \cdot \SurfaceNormal \right] \ d\BoundarySegment
\f]


## IWGs for enforcing Boundary Conditions

### Traction BC (Prescribe Pressure and stresses)
\f[
\Residual_{BN\traction} =
-\int_{\NeumannBoundary} \VelTestFunc \cdot \traction \ d\BoundarySegment
\f]
The prescribed traction \f$ \traction = \CauchyStress \SurfaceNormal \f$ is a vector. 
The unit is force per unit area, and the Keyword used is "Traction".

### Mass Flux Neumann BC (Prescribe Mass in-/out-flow)
\f[
\Residual_{BN\MassFlux} =
 \int_{\NeumannBoundary} \DensTestFunc \MassFlux \ d\BoundarySegment
\f]
The prescribed mass flux \f$ \MassFlux = \density \velocity \cdot \SurfaceNormal \f$ is a scalar. 
The unit is mass per unit area and time, and the Keyword used is "MassFlux".

### Thermal Neumann BC (Prescribe Heat in-/out-flow)
\f[
\Residual_{BN\HeatFlux} =
\int_{\NeumannBoundary} \TempTestFunc \HeatFlux \ d\BoundarySegment
\f]
The prescribed heat flux \f$ \HeatFlux = \ThermalFlux \cdot \SurfaceNormal \f$ is a scalar. 
The unit is Energy per unit area and time, and the Keyword used is "HeatFlux".

### Nitsche Density
NOT IMPLEMENTED!!!
The density Nitsche is derived from the mass flux boundary condition.
\f[
\Residual_{BD\density} = 
\int_{\DirichletBoundary} \DensTestFunc \MassFlux \ d\BoundarySegment
\pm \int_{\DirichletBoundary} \variation{\MassFlux} \jump{\density} d\BoundarySegment
+ \NitschePenaltyParameter \int_{\DirichletBoundary} \DensTestFunc \jump{\density} \ d\BoundarySegment
\f]
where the variation of the mass flux \f$ \variation{\MassFlux} \f$ is 
\f[ \begin{split}
\variation{\MassFlux} 
&= \variation{\density \velocity \cdot \SurfaceNormal} \\
&= (\velocity \cdot \SurfaceNormal) \var{\density} + ( \density \SurfaceNormal ) \cdot \var{\velocity} \\
&= (\velocity \cdot \SurfaceNormal) \DensTestFunc + ( \density \SurfaceNormal ) \cdot \VelTestFunc \\
\end{split} \f]
Hence, the IWG assembles terms both on the density and velocity DoF types.

### Nitsche Velocity
\f[
\Residual_{BD\velocity} = 
- \int_{\DirichletBoundary} \VelTestFunc \cdot \traction \ d\BoundarySegment
\mp \int_{\DirichletBoundary} \variation{\traction} \cdot \jump{\velocity} d\BoundarySegment
- \NitschePenaltyParameter \int_{\DirichletBoundary} \VelTestFunc \cdot \jump{\velocity} \ d\BoundarySegment
\f]
where the variation of the traction \f$ \variation{\traction} \f$ is 
\f[ \begin{split}
\variation{\traction} 
&= \pfrac{\CauchyStress \SurfaceNormal}{\density} \var{\density} 
+ \pfrac{\CauchyStress \SurfaceNormal}{\velocity} \cdot \var{\velocity}  
+ \pfrac{\CauchyStress \SurfaceNormal}{\temp} \var{\temp} \\
&= \left[ \pfrac{\CauchyStress}{\density} \DensTestFunc 
+ \pfrac{\CauchyStress}{\velocity} \cdot \VelTestFunc  
+ \pfrac{\CauchyStress}{\temp} \TempTestFunc \right] \cdot \SurfaceNormal \\
\end{split} \f]
Hence, the IWG assembles terms on the density, velocity,and temperature DoF types.

### Nitsche Temperature
The temperature Nitsche is derived from the heat flux boundary condition.
\f[
\Residual_{BD\temp} = 
\int_{\DirichletBoundary} \TempTestFunc \HeatFlux \ d\BoundarySegment
\pm \int_{\DirichletBoundary} \variation{\HeatFlux} \jump{\temp} d\BoundarySegment
+ \NitschePenaltyParameter \int_{\DirichletBoundary} \TempTestFunc \jump{\temp} \ d\BoundarySegment
\f]
where the variation of the traction \f$ \variation{\traction} \f$ is 
\f[ \begin{split}
\variation{\HeatFlux} 
&= \pfrac{\ThermalFlux \SurfaceNormal}{\temp} \var{\temp} \\ 
&= \left[ \pfrac{\ThermalFlux}{\temp} \cdot \SurfaceNormal \right] \TempTestFunc 
\end{split} \f]
Hence, the IWG assembles terms only on the temperature DoF type.


*/

}
}
