#ifndef MORIS_FN_WRK_PERFORM_REFINEMENT_HPP
#define MORIS_FN_WRK_PERFORM_REFINEMENT_HPP

#include "cl_Matrix.hpp"

namespace moris
{
    namespace hmr
    {
        class HMR;
        class Mesh;
    }

    namespace wrk
    {
        class Performer;

        struct Refinement_Parameters
        {
                //! Field names
                Cell< std::string > mFieldNames;

                //! Refinement level
                Matrix< DDUMat >    mRefinementLevel;

                //! Refinement Pattern
                Matrix< DDUMat >    mRefinementPattern;
        };

        class Refinement_Mini_Performer
        {
            private :

                Refinement_Parameters mParameters;

                std::shared_ptr< Library_IO > mLibrary = nullptr;

            public:

                Refinement_Mini_Performer(){};

                //--------------------------------------------------------------------------------------------------------------

                Refinement_Mini_Performer(
                        ParameterList                 & aParameterlist,
                        std::shared_ptr< Library_IO >   aLibrary );

                //--------------------------------------------------------------------------------------------------------------

                ~Refinement_Mini_Performer(){};

                //--------------------------------------------------------------------------------------------------------------

                /**
                 * Performs refinement using HMR based on the information provided by the cell of performers
                 *
                 * @param aHMR Active instance of HMR.
                 * @param aPerformers Performers which can provide refinement data.
                 * @param aSimultaneous If true (default), refinement steps are generated using all performers simultaneously.
                 * If false, one performer will have all refinement steps performed before moving to the next performer.
                 */
                void perform_refinement(
                        std::shared_ptr<hmr::HMR>          aHMR,
                        Cell< std::shared_ptr<Performer> > aPerformers,
                        bool                               aSimultaneous =  true);

                /**
                 * Queues a single refinement step. This is only intended to be called by \ref moris::wrk::perform_refinement()
                 *
                 * @param aHMR Active instance of HMR.
                 * @param aMesh Mesh generated by HMR, can potentially have some refinement performed on it already.
                 * @param aPerformer A performer which can provide refinement data.
                 * @param aRefinementNumber The refinement number being queued.
                 * @return
                 */
                void queue_single_refinement(std::shared_ptr<hmr::HMR>  aHMR,
                        std::shared_ptr<hmr::Mesh> aMesh,
                        std::shared_ptr<Performer> aPerformer,
                        sint                       aRefinementNumber,
                        sint                       aMeshIndex );

                uint queue_low_level_elements_for_refinement(
                        std::shared_ptr<hmr::HMR>  aHMR,
                        std::shared_ptr<hmr::Mesh> aMesh,
                        std::shared_ptr<Performer> aPerformer,
                        sint                       aMeshIndex );

                moris::sint get_max_refinement_level( const Cell< std::shared_ptr<Performer> > & aPerformers );

                void get_all_refinement_mesh_indices(
                        const Cell< std::shared_ptr<Performer> > & aPerformers,
                        moris::Matrix< DDSMat >                  & aAllPatternMap,
                        moris::uint                              & aNumPattern );
        };


    }
}

#endif //MORIS_FN_WRK_PERFORM_REFINEMENT_HPP
