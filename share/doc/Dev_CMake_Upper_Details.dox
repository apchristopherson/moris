namespace moris{

// Level 5 module

/** @page ExplainUpperLevel Upper-Level Code Details
This section contains explanations for each line of code written in @ref TopLevel, @ref Utilities, and @ref Depends. The section provides a clearer understanding of what the code does and why, however it is not necessary to get your code working. You can skip it by going to @ref CMakeLists.

@subsubsection ExplainTopLevel Top-Level Code Details
In the top-level CMakeLists.txt, the first thing added was a variable for an abbreviation of your project's full name. A good example of a full name is Distributed Linear Algebra whose abbreviation is DLA. moris uses variables for its projects in case the group decides to change a single project name or the entire moris naming convention sometime in the future. If a name change does happen, using the variables allows developers to change the variable and some file names, then quickly get back to development. 

This line uses the @p set command. Naturally, the first argument is the variable name while the second argument is the variable's new value.

    # Source Directories
    set(ALG "ALG")

The @p option command used in the next added line creates a build option that will appear in the CMake Curses and CMake GUI interfaces. This option can be toggled @p ON or @p OFF and controls whether or not the project target is built when @p make is called from the command line. The first argument of this command is the option name, followed by the brief option description, and then the default value.

    option(BUILD_ALG "Build the algorithms library and executable." OFF)

Near the bottom of the file, the @p if statement and @p include are what use the build option. If the build option is set to @p ON, then the include command runs the project's depends file. More details about the depends file is in @ref ExplainDepends.

    if(BUILD_ALG)
        include(${MORIS_DEPENDS_DIR}/ALG_Depends.cmake)
    endif()

@subsubsection ExplainUtilities Utlilities Code Details
@p build_all_exe.cmake within the @p utilities directory turns all of the package options @p ON regardless of what was selected in the configuration interface. This file is run before any of the package depends files if the @p BUILD_ALL option is turned @p ON. At the end of the file, @p BUILD_ALL is set to @p OFF so that it will not continue to overwrite options. 

In the version of the @p set command used here, the first two arguments are the variable name and value as before. The @type{CACHE BOOL} parameters define the variable as a boolean in the cache. The next argument is the variable description and the @p FORCE parameter at the end ensures that the cache variable is overwritten. Cached variables are stored between builds in the @p CMakeCache.txt file and cannot be changed except by manual entry or a @p set command with the @p FORCE parameter.

    set(BUILD_ALG ON CACHE BOOL     
        "Build the algorithms library and executable." FORCE)

@subsubsection ExplainDepends Depends File Breakdown
The depends files are the main part that makes it possible to build each moris package individually. Each project's file adds it to the list of projects that will be built, creates a @p TPL_DEPENDENCIES variable containing the third party libraries the project needs to link to, runs the depends files for each of the moris projects that it depends on, and then adds their @p TPL_DEPENDENCIES lists to its own. This process makes sure that all of the moris libraries needed by the project are built and the third party libraries directly and indirectly needed by the project are linked at build time. The file also has a check in the beginning to make sure the project and the libraries it depends on are only built once.

At the top of the depends file is the part of the code that makes sure the file is not run more than once. If it has already been run, the @p return command is called, causing CMake to leave the file and continue where it was processing before the file was included.

    # Check if PROJ has already been included
    if(DEFINED PROJ_CONFIGURED_ONCE)
        return()
    endif()

    set(PROJ_CONFIGURED_ONCE "YES")

Under the @type{Handling Dependencies} section, the first line of code adds the project to the build list. 

The @p list command has a variety of functions, the most common one being @p APPEND. As the parameter would suggest, the command appends the third argument and onward to the variable named in the second argument. If the variable being appended to does not yet exist, this command will initialize it with the third argument onward.

    # Add PROJ to the source/header directory list
    list(APPEND MORIS_SOURCE/HEADER_DIRS ${PROJ})

After that is the list of third party libraries and then the list of other moris projects the project depends on. Finally, the for each loop goes through the list of moris project dependencies, runs their depends files and appends their @p TPL_DEPENDENCIES to the project's list. In a later file, the duplicates from this list are removed, the third party libraries are found, and their directories are included at the project level.

    foreach(MORIS_DEPENDENCY ${PROJ_MORIS_DEPENDENCIES})
        # Include moris projects directly needed by PROJ
        include(${MORIS_DEPENDS_DIR}/${MORIS_DEPENDENCY}_Depends.cmake)

        # Include third party libraries indirectly needed by PROJ
        list(APPEND PROJ_TPL_DEPENDENCIES ${${MORIS_DEPENDENCY}_TPL_DEPENDENCIES} )
    endforeach()

To continue, refer to @ref CMakeLists.
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<!--
directory list so it will be configured later down the line, sets a third party library list 

The first section of code makes sure that this file is not run more than once. In the Handle Dependencies section, we first add the project to either the source or header directory list. Header directories are any projects that just have headers while the source directories list is for all those with at least one library or executable.

    # Add PROJECT to the source directory list
    list(APPEND MORIS_SRC_DIRS ${PROJECT})

    # Add PROJECT to the header directory list
    list(APPEND MORIS_HEADER_DIRS ${PROJECT})

Next, list the third party libraries that your project files include under the @p _TPL_DEPENDENCIES variable. These will either be the third party library's name in all lowercase or a variable holding the library selected by the user for those third party libraries that are optional. For example, @p "superlu" or @p ${ACML_LAPACK_MKL}.

    # Include third party libraries directly needed by PROJECT
    set(PROJECT_TPL_DEPENDENCIES
        "tpl_name"
        ...
        ${TPL_OPTIONS} )

The next things to include are the moris libraries directly used by your project files. To do this, include those projects' depends files. For example, if your project had files that use the moris linear algebra library, you would include the following line in this section:

    # Include moris projects directly needed by PROJECT

Finally, add the third party libraries that are indirectly needed by your project by adding the @p _TPL_DEPENDENCIES variables from the other moris projects that you just included.

    # Include third party libraries indirectly needed by PROJECT
    list(APPEND PROJECT_TPL_DEPENDENCIES
        ${LNA_TPL_DEPENDENCIES} )
-->

*/
}
