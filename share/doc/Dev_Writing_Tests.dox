#
# Copyright (c) 2022 University of Colorado
# Licensed under the MIT license. See LICENSE.txt file in the MORIS root for details.
#
#------------------------------------------------------------------------------------
#

namespace moris {

// Level 3 module

/** \defgroup WritingTests Writing Tests
This module consists of two sections: @ref WriteTest and @ref CMakeTest.

@section WriteTest How to Write a Test
The general form of a test as written for MORIS is as follows: 

@verbatim
 // Third-party header files.
#include <catch.hpp>

// MORIS project header files.
#include "linalg/col.hpp"
#include "linalg/mat.hpp"
#include "linalg/op_plus.hpp"

// ----------------------------------------------------------------------------

TEST_CASE(
        "moris::op_plus",
        "[linalgebra],[Mat],[Col],[op_plus]" )
{
    SECTION(
            "moris::Col + moris::Col + moris::Col" )
    {
        moris::Col< moris::real > a( 3 );
        moris::Col< moris::real > b( 3 );
        moris::Col< moris::real > c( 3 );
        moris::Col< moris::real > d( 3 );

        a( 0 ) = 1.0;
        a( 1 ) = 1.0;
        a( 2 ) = 1.0;

        b( 0 ) = 2.0;
        b( 1 ) = 2.0;
        b( 2 ) = 2.0;

        c( 0 ) = 3.0;
        c( 1 ) = 3.0;
        c( 2 ) = 3.0;

        d = a + b + c;

        REQUIRE( d( 0 ) == 6.0 );
        REQUIRE( d( 1 ) == 6.0 );
        REQUIRE( d( 2 ) == 6.0 );
    }

    SECTION(
            "moris::Mat + moris::Mat + moris::Mat" )
    {
        moris::Mat< moris::real > a( 3, 3 );
        moris::Mat< moris::real > b( 3, 3 );
        moris::Mat< moris::real > c( 3, 3 );
        moris::Mat< moris::real > d( 3, 3 );

        a( 0, 0 ) = 1.0; a( 0, 1 ) = 1.0; a( 0, 2 ) = 1.0;
        a( 1, 0 ) = 1.0; a( 1, 1 ) = 1.0; a( 1, 2 ) = 1.0;
        a( 2, 0 ) = 1.0; a( 2, 1 ) = 1.0; a( 2, 2 ) = 1.0;

        b( 0, 0 ) = 2.0; b( 0, 1 ) = 2.0; b( 0, 2 ) = 2.0;
        b( 1, 0 ) = 2.0; b( 1, 1 ) = 2.0; b( 1, 2 ) = 2.0;
        b( 2, 0 ) = 2.0; b( 2, 1 ) = 2.0; b( 2, 2 ) = 2.0;
        
        c( 0, 0 ) = 3.0; c( 0, 1 ) = 3.0; c( 0, 2 ) = 3.0;
        c( 1, 0 ) = 3.0; c( 1, 1 ) = 3.0; c( 1, 2 ) = 3.0;
        c( 2, 0 ) = 3.0; c( 2, 1 ) = 3.0; c( 2, 2 ) = 3.0;

        d = a + b + c;

        REQUIRE( d( 0, 0 ) == 6.0 ); REQUIRE( d( 0, 1 ) == 6.0 ); 
        REQUIRE( d( 0, 2 ) == 6.0 );
        REQUIRE( d( 1, 0 ) == 6.0 ); REQUIRE( d( 1, 1 ) == 6.0 ); 
        REQUIRE( d( 1, 2 ) == 6.0 );
        REQUIRE( d( 2, 0 ) == 6.0 ); REQUIRE( d( 2, 1 ) == 6.0 ); 
        REQUIRE( d( 2, 2 ) == 6.0 );
    }
}
@endverbatim

- The third-party include directory for catch.hpp, a C++ test framework. 
Catch stands for C++ Automated Test Cases in Headers and is a multi-paradigm 
automated test framework for C++. It is implemented entirely in a set of header 
rules, but is packaged up as a single header (catch.hpp) for convenience. More 
information on Catch can be found at [github.com](https://github.com/philsquared/Catch/blob/master/docs/tutorial.md)
- MORIS include directories are the same as in the @ref WritingFunctions section.
- Next is the Test Case, followed by the name of the function to be tested 
@p op_plus.hpp (the plus-sign operator), and the functionality required by the test. 
- Following the test case is the Section; It is useful to break up a test 
into sections so that only a part of a given test can be run, without running 
the whole thing. This can be done through the use of tags. 
- Conditions of the test for that section. There can be many conditions, 
but in general we will use three types of conditions: 
 + @p Require : This can be thought of as a "hard fail"; if this 
condition is not met, the test will exit with an error.
 + @p Check : This can be thought of as a "soft fail"; if this 
condition is not met, the test will continue but will throw a warning. 
 + @p Require_Throws : This requires that the 
function being tested throws an exception. If the function fails to throw an 
exception, the test will exit with an error. 

@section CMakeTest How to Add a Test in CMake
After writing a test, it is imperative to add it to CMake so that it will be built and run later on. To do this, simply open up the @p CMakeLists.txt file in the appropriate @p test directory and add your test file's name to the @p TEST_SOURCES list.

    set(TEST_SOURCES
        test_source_1.cpp
        ...
        test_source_n.cpp )

Then, if your test includes headers from other packages, add those packages to the @p TEST_INCLUDES list unless they are already listed.

    set(TEST_INLCUDES
        ${PACKAGE_1}
        ...
        ${PACKAGE_N} )

If your test also uses functions from other packages or external libraries, add them to the @p TEST_DEPENDENCIES list.

    set(TEST_DEPENDENCIES
        ${LIB_1}
        ...
        ${LIB_N} )

*/
}

