namespace moris {

// Level 3 module

/** \defgroup WritingFunctions Writing Functions
The guidelines in this modules should be used for writing new functions into existing source files and for writing new source files. @ref CMakeSource is only for new source files.

@section WriteFunction How to Write a Function
For guidelines on the structure of function declarations, see section:
@ref CodingStyle. The general form of a C++ function written for MORIS is 
as follows:

@verbatim
#ifndef MORIS_PATH_FN_FUNCTION_NAME_HPP_
#define MORIS_PATH_FN_FUNCTION_NAME_HPP_

// Third-party header files.
#include <armadillo>
#include <Eigen/Core>

// MORIS library header files.
#include "mat.hpp"

namespace moris {

    /**
     * @brief Give a brief description of the function.
     *
     * @param[in] Input parameter.
     *
     * @return Function return.

template< typename T>
return_type 
function_name( 
          parameter list )
    {
    body of the function
    }
}

#endif
@endverbatim

The parts of the function are broken down below

- @type{#ifndef MORIS_FN_FUNCTION_NAME_HPP_} : This is an include 
guard which checks to see if a unique value (in this case @p MORIS_FN_FUNCTION_NAME_HPP_) is defined. 
If it is not defined, it defines it and continues to the rest of the function 
until the closing @type{#endif}. When the code is included again, the first @type{#ifndef} 
fails, resulting in a blank file. This prevents double declaration of any 
identifiers such as types, enums, and static variables. 

- @type{#define MORIS_FN_FUNCTION_NAME_HPP_} : Directive which 
removes occurrences of the identifier (in this case 
@p MORIS_FN_FUNCTION_NAME_HPP_) from the source file. The identifier remains 
defined and can be tested by using the @type{#if} defined and @type{#ifdef} directives.
    
- @type{#include @<armadillo@> , @#include @<Eigen@> } : Third-party 
header files to include, based on which packages you intend to use. In this 
case, Eigen and armadillo are included. 

- @type{#include "mat.hpp"} : Header files to include from our library; 
in this case, mat.hpp is the header file that deals with matrix operations.
       
- @type{namespace moris} : Namespace that allows named entities that 
would otherwise have global scope to be grouped into narrower scopes. This 
allows organizing the elements of programs into different logical scopes 
referred to by names. These variables can be accessed from within their 
namespace normally, with their identifier, but if accessed from outside the 
namespace they have to be properly qualified with the scope operator "::". 
This is particularly useful to avoid name collisions.

- Give a brief description of the function, input parameters, and 
return parameters in Doxygen format as described in the @ref DocumentationStyle section.
       
- @type{ template @<typename T@> } : Define a class template, so that the 
function can work on many different data types without being rewritten for each 
one. 
       
- @p return_type : The data type of the value the function returns. 
Often, this is set to "auto" to retain generality. Some functions 
perform the desired operations without returning a value. In this case, the 
return type is the keyword "void".
       
- @p function_name : The actual name of the function. The function 
name and the parameter list together constitute the function signature. 

- @p parameter_list : A parameter is like a placeholder. When a 
function is invoked, you pass a value to the parameter. This value is referred 
to as actual parameter or argument. The parameter list refers to the type, 
order, and number of the parameters of a function. Parameters are optional; 
that is, a function may contain no parameters.

- @type{body of the function} : A collection of statements that define 
what the function does. 

- @type{#endif } : "endif" to close the include guard, shown in the first line of the example.


@section CMakeSource Adding a Source File to the Build
After adding a new source file to a package, the file must be added to the appropriate CMake source list. Open the @p CMakeLists.txt file in the @p src directory your file is located in. 

@subsection LibrarySource Add to a Library
If the file is a supplement to the library, add the filename to the @p LIB_SOURCES list in the Library section.

    set(LIB_SOURCES
        lib_source_1.cpp
        ...
        lib_source_n.cpp )

If your library source file includes headers from other packages, add those packages to the @p *_INCLUDES list in the Header section (@p * is the package whose directory you're in).

    set(*_INCLUDES
        ${PACKAGE_1}
        ...
        ${PACKAGE_N} )

If your library source file defines a function that uses functions from other packages or external libraries, add those packages or libraries to the @p LIB_DEPENDENCIES list.

    set(LIB_DEPENDENCIES
        ${LIB_1}
        ...
        ${LIB_N}

@subsection ExecutableSource Add to an Executable
If your file is a supplement for the executable, the steps are the same as those to @ref LibrarySource, but variables are in the Executable section and are prefixed with @p EXE instead of @p LIB.

*/

// Add section linking people to the documentation for adding new libraries and executables
}
