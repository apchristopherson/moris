#
# Copyright (c) 2022 University of Colorado
# Licensed under the MIT license. See LICENSE.txt file in the MORIS root for details.
#
#------------------------------------------------------------------------------------
#

namespace moris{

// Level 5 module

/** @page ExplainCMakeLists Project-Level CMakeLists Details
@section ExplainTopLevelProject Top CMakeLists Details
The CMakeLists file at the top of the project directory tree includes each of the third party libraries needed by the project and adds the @p src and @p test subdirectories.

The first few lines of code remove any duplicate entries from the @p TPL_DEPENDENCIES list, defined in the @ref Depends, then go through each third party library in the list and run their associated @p .cmake file. Each of these files handle finding the package on the user's machine and adding the package's include directories to the search path. They also set some variables for later use.

@p list is used in this file with the @p REMOVE_DUPLICATES parameter. This command moves through the variable named after @p REMOVE_DUPLICATES, removing all copies of elements in the list.

    # Third party library dependencies
    list(REMOVE_DUPLICATES PROJ_TPL_DEPENDENCIES)
    foreach(PROJ_TPL ${PROJ_TPL_DEPENDENCIES})
        include(${MORIS_TPL_DIR}/${PROJ_TPL}.cmake)
    endforeach()

The second portion of the file processes the CMakeLists in the source directory so that the project's library is built. Then, if @p MORIS_USE_TESTS and your project's build option has been selected, the @p test directory is also processed.

    # Add source directory
    add_subdirectory(src)

    # Add test directory
    if(MORIS_USE_TESTS AND BUILD_PROJ)
        add_subdirectory(test)
    endif()

@section ExplainProjectSrc Source-level CMakeLists Details
@subsection ExplainHeaderSec  Header Section

The first section of the source-level CMakeLists.txt sets the project version, lists of the project's header files, and adds necessary moris directories to the search path. The project version is set to be used for version checking when users include moris in their own projects.

    # Set version
    set(${PROJ}_VERSION ${MORIS_VERSION})

Header files are listed so that they can be added to an @p include directory when the project is installed. More information on installation can be found in @ref ExplainInstallSec below.

    # List header files
    set(HEADERS
        project_header_1.hpp
        ...
        project_header_n.hpp )

The last bit of code in this section lists the moris projects whose headers are needed by the current project. This list is then iterated through, adding the @p src directory of each moris project in the list to the search path so your project can find files from other moris projects. <!-- meh -->

    # List header dependencies
    set(PROJ_INCLUDES
        ${MORIS_PROJECT_1}
        ...
        ${MORIS_PROJECT_N} )
    
    foreach(PROJ_INCLUDE ${PROJ_INCLUDES})
        include_directories(../../${PROJ_INCLUDE}/src)
    endforeach()

@subsection ExplainConfigSec Config Files Section

The configuration file section first includes @p CMakePackageConfigHelpers, a CMake module that adds the @p configure_package_config_file and @p write_basic_package_version_file functions, among others. All functions included by this module are tools that aid in the creation of config files, discussed in @ref Config.

    # Build *Config and *ConfigVersion files
    include(CMakePackageConfigHelpers)

@p configure_package_config_file dereferences CMake variables and inserts important code into the config template file written in @ref Config. First, it takes the name of the config template file (or path to it if applicable). The second argument is what the full path to the config file will be once the project has been built. After that, the @p INSTALL_DESTINATION for the config file is set. Lastly, @p PATH_VARS precedes a list of variables that will be referenced in the config file. This list can be added to as seen fit, but should at least contain the variables listed below.

    configure_package_config_file(
        ${PROJ}Config.cmake.in
        ${${PROJ}_CONFIG_BUILD_DIR}/${PROJ}Config.cmake
        INSTALL_DESTINATION ${CONFIG_INSTALL_DIR}/${PROJ}
        PATH_VARS LIB_INSTALL_DIR )

@p write_basic_package_version_file creates a file to be build alongside the config file which checks the project version and throws an error if it is not compatible with the version that the user requested. The first argument is what the full path to this file will be. After the @p VERSION parameter is the project's version (defined in @ref ExplainHeaderSec). Then, @p COMPATIBILITY precedes the requirements that will be used when checking compatibility. @p AnyNewerVersion means that the version checker will accept any project version equal to or newer than the requested version. Other options for compatibility checking can be found in @ref CMakeFunctions.

    write_basic_package_version_file(
        ${${PROJ}_CONFIG_BUILD_DIR}/${PROJ}ConfigVersion.cmake
        VERSION ${{PROJ}_VERSION}
        COMPATIBILITY AnyNewerVersion )

@subsection ExplainInstallSec Installation Section

Package installation is important for down the line when external users want to download and use moris. After building moris, they will use @type{make install} to install moris in their third party library directory. This section will tell CMake which files to install and where to put them. 

The first @p install command installs the Config and ConfigVersion files built in the previous section to the @p share/PROJ directory of the install tree. The second @p install command installs the list of header files created in the @ref ExplainHeaderSec. 

Like @p list, the @p install command has many different subcommands that define its behavior. Here, the @p FILES parameter is used to install individual files in the directory specified after @p DESTINATION.

    # Install *Config and *ConfigVersion files
    install(FILES ${${PROJ}_CONFIG_BUILD_DIR}/${PROJ}Config.cmake 
        ${${PROJ}_CONFIG_BUILD_DIR}/${PROJ}ConfigVersion.cmake
        DESTINATION ${CONFIG_INSTALL_DIR}/${PROJ} )

    # Install header files
    install(FILES ${HEADERS}
        DESTINATION ${HEADER_INSTALL_DIR}/${PROJ} )

The next piece of code in this section installs the library and/or executable into @p lib/PROJ for libraries and @p bin/PROJ for executables. Then, it adds these targets to a group, @p PROJTargets.

@p install with the @p TARGETS subcommand installs the listed targets into a destination based on their types. Static libraries go to @p ARCHIVE_DESTINATION, shared libraries go to @p LIBRARY_DESTINATION, and executables go to @p RUNTIME_DESTINATION. The @p EXPORT parameter at the end groups the targets under the name that follows it. Recall that only targets which already exist should be included with this command.

    # Install library and executable
    install(TARGETS ${PROJ}-lib ${PROJ}-exe
        ARCHIVE_DESTINATION ${LIB_INSTALL_DIR}/${PROJ}
        LIBRARY_DESTINATION ${LIB_INSTALL_DIR}/${PROJ}
        RUNTIME_DESTINATION ${EXE_INSTALL_DIR}/${PROJ}
        EXPORT ${PROJ}Targets )

The last part of the installation section exports the target group, creating another file that will be included by the Config file. Including this file will allow external projects to reference the exported moris targets. @p install with the @p EXPORT command takes the name of the group to export and then the @p DESTINATION path to export it to. The new file will have the name of the group, appended with @p .cmake.

    # Export library into *Targets file
    install(EXPORT ${PROJ}Targets
        DESTINATION ${CONFIG_INSTALL_DIR}/${PROJ} )

@section ExplainProjectTests Test-Level CMakeLists Details
The code in the test-level CMakeLists.txt is very similar to that in @ref AddingExecutables. The file includes needed directories, sets an output location for the test executable, creates the executable, links it to the appropriate libraries, and then enables it for running with CTest.

@p TEST_SOURCES, set at the top of the file, should be filled with all of the test source files. Make sure @p test_main.cpp is included in this list. It is the wrapper which is used to run all moris tests and can be found in any other project test directory.

    # List source files
    set(TEST_SOURCES
        test_main.cpp
        my_test_1.cpp
        ...
        my_test_n.cpp )

@p TEST_INCLUDES lists all of the moris projects the test needs to include header files from. @p LNA, @p IOS, and @p COM will always be needed because of @p test_main.cpp. The next bit of code goes through each element in @p TEST_INCLUDES and includes that package's @p src directory. If any other directories need to be included, add an @p include_directories command under @type{List additional includes}.

    # List test includes
    set(TEST_INCLUDES
        ${LNA}
        ${IOS}
        ${COM}
        ...
        ${MORIS_PROJECT} )

    foreach(TEST_INCLUDE ${TEST_INCLUDES})
        include_directories(../../${TEST_INCLUDE}/src)
    endforeach()

    # List additional includes

After all necessary directories have been included, the @p TEST_DEPENDENCIES variable should be filled with libraries that the test needs to link to. Recall that these libraries are either the moris package name followed by @p -lib or a variable whose name is @p MORIS_TPL_LIBS where @p TPL is the name of the third party library or libraries (like @p ARMADILLO_EIGEN) to be linked. For tests @p COM-lib is always needed due to @p test_main.cpp.

    # List test dependencies
    set(TEST_DEPENDENCIES
        ${COM}-lib
        ...
        ${MORIS_{TPL}_LIBS} )

The output path for the test is set with @p CMAKE_RUNTIME_OUTPUT_DIRECTORY and will appear in @p moris/projects/PROJ/test/bin unless made otherwise.

    # Set the output path for test
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${BIN})

@p add_executable will create a make target for @p PROJ-test.exe using @p TEST_SOURCES. Then, @p target_link_libraries links @p PROJ-test.exe to @p TEST_DEPENDENCIES.

    # Create executable
    add_executable(${PROJ}-test${EXE_EXT} ${TEST_SOURCES})
    target_link_libraries(${PROJ}-test${EXE_EXT} ${TEST_DEPENDENCIES})

Finally, the executable is marked as a test. The test can the be run with the commands @type{make test} or @p ctest in the command line. Further details will come tomorrow. @ref ExplainHeaderSec

@p add_test takes the @p NAME parameter followed by the name the test will have in the output. The code that follows the @p COMMAND parameter is what will be run on the command line for this test when @p ctest or @type{make test} is called. If @p COMMAND is followed by the name of an executable CMake target, the executable will be run from wherever it is located.

    # Mark as test
    add_test(NAME ${PROJ}-test
        COMMAND ${PROJ}-test${EXE_EXT} )

To continue, refer to @ref Config.

<!--
@subsubsection HeaderSec Header Section
After replacing instances of "project" and "PROJECT" with your project name and abbreviation, respectively, set the project version number. This may be used update of the CMake code and should be set equal to the moris version number.

    # Set version
    set(${PROJECT}_VERSION ${MORIS_VERSION})

The @p HEADERS variable lists the headers in your project. These will be installed in an include directory later.

The next section of code moves through a list of other moris projects that your project uses headers from and includes each on the search path.

    # List header dependencies
    set(PROJECT_INCLUDES
        ${MORIS_PROJECT_1}
        ...
        ${MORIS_PROJECT_N} )
    
    foreach(PROJECT_INCLUDE ${PROJECT_INCLUDES})
        include_directories(../../${PROJECT_INCLUDE}/src)
    endforeach()

@subsubsection LibraryExecutableSec Library and Executable sections
For these sections, refer to @ref AddingLibraries and @ref AddingExecutables.

@subsubsection ConfigSec Config File Section
This portion of the code configures your project's config file which you will write in the next section, @ref Config. The first line includes a CMake package containing functions to appropriately configure a config and a version file.

    # Build *Config and *ConfigVersion files
    include(CMakePackageConfigHelpers)

The first function configures the config file in proper CMake fashion. The first argument it takes is the name of the config file that you will write and the second argument is the the name of the file after configuration. It can optionally include the path to write the file to, in this case @p build/projects/PROJECT/src/config. The next line sets the install destination for the configured file and the last line is a list of path variables that will be dereferenced in the config file.

    configure_package_config_file(
        ${PROJECT}Config.cmake.in
        ${${PROJECT}_CONFIG_BUILD_DIR}/${PROJECT}Config.cmake
        INSTALL_DESTINATION ${CONFIG_INSTALL_DIR}/${PROJECT}
        PATH_VARS LIB_INSTALL_DIR )

The second function builds a project version file whose name and path are specified by the first argument. The next line tells the function the version of your project and the last line tells the function how compatible your project versions are. @p AnyNewerVersion means that if a version of your project is specified when a user includes it in their own project, CMake will throw a Not-Found error if the project version is less than that requested.

    write_basic_package_version_file(
        ${${PROJECT}_CONFIG_BUILD_DIR}/${PROJECT}ConfigVersion.cmake
        VERSION ${{PROJECT}_VERSION}
        COMPATIBILITY AnyNewerVersion )

@subsubsection InstallSec Installation Section
Installation is mostly a reordering of files after the build and happens at the call of:

    make install

The first function installs the config and version files of your project at the path listed after the @p DESTINATION parameter.

    # Install *Config and *ConfigVersion files
    install(FILES ${${PROJECT}_CONFIG_BUILD_DIR}/${PROJECT}Config.cmake 
        ${${PROJECT}_CONFIG_BUILD_DIR}/${PROJECT}ConfigVersion.cmake
        DESTINATION ${CONFIG_INSTALL_DIR}/${PROJECT} )

The second function is the same as the first, but instead installs the header files.

    # Install header files
    install(FILES ${HEADERS}
        DESTINATION ${HEADER_INSTALL_DIR}/${PROJECT} )

The third function installs the library and/or executable targets to the @type{ARCHIVE DESTINATION}, @type{LIBRARY DESTINATION}, or @type{RUNTIME DESTINATION} for static libraries, shared libraries, and executables, respectively. It also collects the targets into a new export target used by the next function.

    # Install library and executable
    install(TARGETS ${PROJECT}-lib ${PROJECT}-exe
        ARCHIVE_DESTINATION ${LIB_INSTALL_DIR}/${PROJECT}
        LIBRARY_DESTINATION ${LIB_INSTALL_DIR}/${PROJECT}
        RUNTIME_DESTINATION ${EXE_INSTALL_DIR}/${PROJECT}
        EXPORT ${PROJECT}Targets )

The last function takes the export target and generates a file that will be used by the config file to import your project targets into other projects.

    # Export library in to *Targets file
    install(EXPORT ${PROJECT}Targets
        DESTINATION ${CONFIG_INSTALL_DIR}/${PROJECT} )
-->

*/
}

