#
# Copyright (c) 2022 University of Colorado
# Licensed under the MIT license. See LICENSE.txt file in the MORIS root for details.
#
#------------------------------------------------------------------------------------
#

namespace moris {

/** @page BuildingMoris Building MORIS

<b>Table of Contents</b>
- @ref Checkout
  - @ref CommandCheckout
  - @ref GitCheck
  - @ref GitCommandCheckout
  - @ref EclipseCheckout
- @ref BuildingDoxygen
- @ref EnvironmentVariables
  - @ref EnvVarList
  - @ref RequiredEnvVars
  - @ref OptionalEnvVars
  - @ref AddEnvVars
  - @ref OtherAcceptedEnvVars
- @ref ConfiguringMoris
  - @ref CMakeCurses
  - @ref TerminalOptions
  - @ref MorisBuild
- @ref WindowsBuild

Here you will find instructions about how to checkout MORIS from GitHub, compile the MORIS Doxygen, set necessary environment variables, and configure your MORIS build using CMake.

@section Checkout Checkout MORIS
This section includes instructions about how to @ref CommandCheckout or @ref EclipseCheckout. If you have already checked out MORIS, you can skip to @ref BuildingDoxygen or @ref EnvironmentVariables.

@subsection CommandCheckout Checkout Using the Terminal
Checking out MORIS using the command line is relatively easy on a Unix-based machine (i.e. a Linux distribution or macOS). For Windows machines, refer to @ref WindowsBuild.

@subsubsection GitCheck Make Sure Git is Installed
First, you have to make sure that you have Git installed on your machine. To check, try running the command:

    git --help

If the following or something similar comes up

    git: Command not found.

then you will need to install Git. This requires root access and may need your administrator's (Kurt's) assistance.

@subsubsection GitCommandCheckout Checkout with Git
Move to the directory you would like to put the MORIS source code in. For example:

    cd $HOME/codes

Then, enter the command:

    git clone ssh://titan/home/git/codes/moris

You will then be prompted to enter your password. If your password does not work, talk to Kurt about getting an account on Titan.

For additional help with the@type{ git clone }command, refer to the [GitHub help page](https://help.github.com/articles/cloning-a-repository/).

@subsection EclipseCheckout Checkout Using Eclipse
Checking out the code in Eclipse requires the EGit plug-in. EGit comes preinstalled in the Eclipse Juno release (July, 2012). If you have an earlier version of Eclipse, refer to the [EGit help page](https://eclipsesource.com/blogs/tutorials/egit-tutorial/). To import the project in Eclipse,

-# Open the Eclipse Import Wizard,  either:
 
  - Click on @b File then @b Import...  
  OR  
  - Right-Click inside the Project Explorer and select @b Import...

-# Expand the Git folder and select @bold{Projects from Git}. Click 
@b Next.
 
-# Select @bold{Clone URI}. Click @b Next.
 
-# In the URI field, enter: @p 
ssh://titan/home/git/codes/moris

-# In the Authentication section, enter your username and 
password. It is recommended that you choose the Save authentication option. 
Click @b Next.
 
-# The master branch is chosen by default. You may choose to clone another branch, however the master branch is recommended. Click @b Next.
 
-# Select the directory you would like to clone MORIS into using either method described below.
 -# In the Directory field, enter the absolute path to the directory you would like to clone MORIS into. For example:
 
        /home/your_user/codes/moris
 
 -# Select the directory from the file explorer by clicking @b Browse.
 
-# Enter your password as prompted.

-# Click @b Next. Click @b Finish.

-# If you chose to save your authentication information, you may be prompted 
to provide security questions and answers. You may opt out or click Yes to 
provide your custom security information. After you have done so, click 
@b Ok.

@section BuildingDoxygen Compiling Documentation
MORIS uses Doxygen to house its documentation. With the Doxygen files compiled, you will be able to look in depth at each of the MORIS subpackages and the functions contained therein. Before proceeding, make sure that you have Doxygen and CMake installed on your computer.

The first step to compiling the documentation is to create a build directory. This is where you will run commands to turn the source files into libraries, executables, etc. before installing them. You can place this directory anywhere on your computer. For example, it could be a sibling to the MORIS source directory:

    cd $HOME/codes
    mkdir moris_build

Now, direct into your build directory

    cd moris_build

From here, we will first build MORIS without any of its subpackages. For the following command, enter@type{ cmake } followed by the path to the MORIS source directory. This can be either an absolute or a relative path. Continuing our example,

    cmake ../moris  

OR

    cmake $HOME/codes/moris

Next, build the MORIS Doxygen.

    make doxy

All of the documentation should now be built on your computer. To access it, direct over to the share/doc/html directory and open BuildingMoris.html in your prefered web browser. For example,

    cd share/doc/html
    firefox BuildingMoris.html

And now you're on this page! Weird, right?

@section EnvironmentVariables Environment Variables
To run properly, MORIS needs a variety of environment variables set to the paths of certian third party libraries. You can find a list of third party libraries needed by each MORIS package on that package's documentation page. The full @ref EnvVarList and instructions on @ref AddEnvVars are below. 

@subsection EnvVarList List of MORIS Environment Variables
Many of these variables do not need to be set if they are located in a default location on your computer (such as@type{ usr/lib}). If your@type{ .*rc }file already contains a number of these environment variables using a different naming convention, check the @ref OtherAcceptedEnvVars to see if yours will work with MORIS.

@subsubsection RequiredEnvVars Required Environment Variables
These are all needed by at least one MORIS package.

@b _PETSc_

Path to the PETSc directory containing the include and lib directories.

    PETSc_DIR

@b _ViennaCL_

Path to the ViennaCL directory containing the include and lib directories.

    ViennaCL_DIR

@b _Boost_

Path to the Boost directory containing the include and lib directories.

    Boost_DIR

@b _GCMMA_

Path to the GCMMA directory containing the include and lib directories.

    GCMMA_DIR

@b _SuperLU_

Path to the SuperLU directory containing the include and lib64 directories.

    SuperLU_DIR

Path to the SuperLU-DIST directory containing the include and lib directories.

    SuperLU_DIST_DIR

@b _Trilinos_

Path to the Trilinos directory containing the include and lib directories.

    Trilinos_DIR

Path to the Trilinos debug directory containing the include and lib directories; optional.

    Trilinos_DEBUG_DIR

@b _Armadillo_

Path to the Armadillo directory containing the include and lib directories; Eigen3 can be used instead.

    Armadillo_DIR

@b _Eigen3_

Path to the Eigen3 directory containing the include directory; Armadillo can be used instead.

    Eigen_DIR

@b _ACML_

Path to the ACML directory containing the include and lib directories; MKL or LAPACK can be used instead.

    ACML_DIR

@b _MKL_

Path to the MKL directory containing the include and lib directories; ACML or LAPACK can be used instead.

    MKL_DIR

@b _LAPACK_

Path to the LAPACK directory containing the lib64 directory; MKL or ACML can be used instead.

    LAPACK_DIR


@subsubsection OptionalEnvVars Optional Environment Variables
These must be set for MORIS to use certain configuration options

@b _SNOPT_

Path to the SNOPT directory containing the lib directory.

    SNOPT_DIR

@b _L-BFGS-B_

Path to the L-BFGS-B directory containing the lib directory; must be also have ARPACK.

    LBFGSB_DIR

@b _ARPACK_

Path to the ARPACK directory containing the lib directory; must be also have L-BFGS-B.

    ARPACK_DIR

@subsection AddEnvVars How to Add Environment Variables
To add environment variables on your machine, you will first have to know which flavor of shell you are using. To do this, open your terminal and enter the following command:

    echo $0

This could get you one in a variety of outputs. For example, C shell will give you:

    /bin/csh

If you are not sure which shell your output corresponds to, a quick search online ought to tell you. Next, go to your home directory and open your@type{ .*rc }file in your prefered text editor.

    cd $HOME
    kwrite .cshrc

Note that the @type{*} in @type{ .*rc } is most likely the short name of your shell (._csh_rc for C shell).

Scroll down to the bottom of the file and add the following code for each environment variable:

@bold{C shell or derivatives}

    setenv ENV_VAR 'path/to/directory/or/file'

@bold{Other shells}

    export ENV_VAR='path/to/directory/or/file'

When all necessary environment variables have been set, save the file and in your terminal enter@type{ source } followed by the name of the file you just edited.

    source .chsrc

@subsection OtherAcceptedEnvVars Other Accepted Environment Variable Formats
Though we advise using the naming convention used in the @ref EnvVarList, MORIS will also accept environment variables with the following name formats. Using SuperLU as an example:

    SUPERLUDIR
    SUPERLU_DIR
    SuperLU_DIR
    SUPERLU_PATH
    SuperLU_PATH
    SUPERLU_ROOT
    SuperLU_ROOT

As you can see, MORIS accepts environment vairiables that put the entire package name in caps and those which capitalize letters according to the package's proper name (what you would see [searching for the package online][SuperLUSearch]). For packages whose proper names are in all caps (such as ACML), MORIS accepts the package name in all capital or all lower case letters.

    ACML_DIR
    acml_DIR

[SuperLUSearch]: https://www.google.com/search?q=superlu_library

@section ConfiguringMoris Configuring MORIS
MORIS provides a number of configuration options for your build based on which packages you want to build and which external libraries you would like to use to build them. In the @ref BuildingDoxygen section, we already created a build directory for MORIS and ran CMake from that directory. In doing this, we have already configured MORIS to its default configuration with no packages selected. To start building packages and selecting other configuration options, you may either use the @ref CMakeCurses or @ref TerminalOptions.

@subsection CMakeCurses CMake Curses Interface
The CMakeCurses interface is perhaps the most straightforward way to configure MORIS. First direct to your build directory (and make one if you haven't already). 

    cd $HOME/codes/moris-build

Assuming your build directory is a sibling of the MORIS source directory, enter:

    ccmake ../moris

This will open up the CMake Curses interface. From here, you can turn on and off packages and other options. To do so, use the arrow keys to get to the option you want to turn on or off and hit the @b Enter or @b Return key. You should notice below the option list a brief description of what the selected option does and below that, other hotkeys that you can use in the interface.

Once you have selected your options, hit @b c to configure CMake with your options. Configuration messages will show up in the next few moments. If any of those messages are fatal errors (such as a third party library not found), you will need to fix them or toggle the appropriate options to bypass these errors before moving on. Hit @b e to exit the configuration message display and return to the option interface. When it appears near the other hotkeys, hit @b g to generate the MORIS Makefiles. Note that even without any errors, you may have to configure the options more than once before the generate option shows up.

When CMake is done generating Makefiles, the curses interface will close. Proceed to @ref MorisBuild. 

@subsection TerminalOptions Define Options on the Command Line
Note that this method is not recommended except for experienced users. It requires prior knowledge of the available options and can easily take longer than using the @ref CMakeCurses.

To set your configuration options using the command line, first direct to your build directory (and make one if you haven't already).

    cd $HOME/codes/moris-build

If you haven't done so already in the @ref BuildingDoxygen section, run@type{ cmake }followed by the path to the top-level MORIS directory. For a directory that is a sibling to MORIS, this would be:

    cmake ../moris

Once that runs, you can reconfigure with desired build options by defining them after the@type{ cmake }command:

    cmake -D MY_OPTION_1=ON -D MY_OPTION_2=OFF ... .

For example, a build of the STK package using MKL instead of ACML would use:

    cmake -D BUILD_STK=ON -D MORIS_USE_ACML=OFF -D MORIS_USE_MKL=ON .

@subsection MorisBuild Building your MORIS Configuration
Once you have configured the Makefiles, you can build your configuration of MORIS by typing:

    make

Due to the large size of MORIS, this may take some time. To build the project faster, use:

    make -jN

where N is the number of processers you would like to use.

@section WindowsBuild
Windows is not fully supported at this time. Some features of MORIS may not function properly. If you do wish to try with windows, it is advised to @ref EclipseCheckout or download a Unix kernel and @ref CommandCheckout.

*/
}

