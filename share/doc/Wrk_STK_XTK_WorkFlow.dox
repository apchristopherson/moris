#
# Copyright (c) 2022 University of Colorado
# Licensed under the MIT license. See LICENSE.txt file in the MORIS root for details.
#
#------------------------------------------------------------------------------------
#

namespace moris {

// Level 3 module

/** \defgroup STK_XTK_Workflow  STK_XTK_Workflow
This section details STK_XTK Workflow in MORIS. It shows functional utility of each module as a part of workflow and how each module
interacts/communicates with each other.

<BR>

@section WorkFlow-Network

See below figure for graphical network representation of STK-FEM Workflow.
\image html "STK_XTK_Wrkl.png" "STK_FEM Workflow" width=50%

Per figure above, the current workflow consists of two performers, MTK_Performer and MDL_Performer.

<BR>

@section Header-Call

See the table below to see the function call of each module within input.cpp file through header files.

<table>
<caption id = "Function call of Workflow Module"> Function call in Workflow</caption>
<tr><th> Module </th>               <th> Header Calls</th></tr>
<tr><td> STK_Parameter_List </td>   <td> fn_PRM_STK_Parameters.hpp</td></tr>
<tr><td> XTK_Parameter_List </td>   <td> fn_PRM_XTK_Parameters.hpp</td></tr>
</table>

<BR>

@section Workflow-Performance

<b>Initializer:</b>

Initialize module initializes ADVs bounded by upper and lower bounds from GEN.



<b>Performer:</b>

Performer stage consists of XTK Performer and MDL performer. \n
XTK perform creates XTK mesh from MTK mesh. MTK mesh is stored in MTK performer which is built from STK mesh. STK mesh is created by mesh pairing of integrated and \n
interpolated mesh. After receiving mesh from MTK, XTK performs decomposition and enrichment wherein it calls GEN to register intersection points. \n

Second stage, MDL performer then analyze the model and solves the physics problem. It also establishes design variable interface with GEN to communicate IQIs.


<BR>

@section Example

<b>Example:</b> STK_XTK_HeatConduction.cpp

*/
}
