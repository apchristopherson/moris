#
# Copyright (c) 2022 University of Colorado
# Licensed under the MIT license. See LICENSE.txt file in the MORIS root for details.
#
#------------------------------------------------------------------------------------
#

namespace moris
{
// Level 3 module

/**
@defgroup DocumentationStyle Documentation Style
Guidelines for documenting the moris project are broken into three categories:

- in-source documentation
- chapters and pages
- proper commit messages

@section CommentBlock Header Documentation

The following guidelines apply to documentation:

- All public members of a class or namespace must be documented.
- All public members should have brief descriptions at the very least.
- Classes and functions should have detailed descriptions.
- All arguments to functions, if they have any, should be documented.
- All returns should be documented.
- Documentation comments must be kept in the header file, and placed in a 
  comment block above each class member.
- Begin each comment block with @p /**. You may follow this with the detailed 
  description or with a Doxygen command.
  
  @note Regular comment blocks, not meant for Doxygen, begin with @p /*.
  
- Use the "at" operator @p @@ in front of Doxygen commands.
- Brief description are declared using the `brief' command, as in:
 
@verbatim
* @brief This is a brief description
@endverbatim
- You can also write a brief description using @p ///@< next to a simple member 
  (e.g. a member variable). For example,

@verbatim
int mSize; ///< size of vector
@endverbatim

Recall that, in general, variables should have clear names (see section @ref 
NamingVars). The use of this type of comment should be limited.

- List input (and output) arguments using the @p param command, followed by 
[in] 
  (or [out]), followed by the name of the variable as it appears in the 
  declaration and a description of the argument.

@verbatim
* @param[out] aOutputVetor This is the output vector description
* @param[in]  aScalar      This is the scalar description
@endverbatim

- If the member function has a return, use the @p return command to describe 
  what a function returns, if any. Note that there is a difference between a 
  function returning something and taking an output as an argument.

@verbatim
* @return This is a description of what the function returns.
@endverbatim

- To include an in-line Latex equation, surround it with @type{@@f@$ ... @@f@$}.
- The @p since command should not be used.

@subsection SnippetUse Using Snippets to Document Syntax
Snippets of code can be used to as part of the documentation and as part of the 
unit tests. Consider, as an example, the QR decomposition function. The unit 
tests for this function include correct uses of this function (naturally, the 
unit test first makes a matrix and then calls @p morris::qr). The goal is use 
the same snippet of code that already exists in the unit test as part of the 
documentation, where appropriate. To do this,

-# Cut and paste the snippet of code onto a new file.
-# Save this file with an @p .inc extension in the @p snippets directory, which 
   is internally organized to mimic @p src and @p test/src.

As an example, here is @p %snippets/linalg/fn_qr.inc:
   @include linalg/fn_qr.inc

-# Then, to use it as part of the test, use the command
@code{.cpp}
#include "linalg/fn_qr.inc"
@endcode
Note that the path to the snippet is written relative to @p snippets.

-# Finally, to use the snippet of code as part of the documentation use the 
Doxygen command @p include:
@code{.cpp}
/*
 * ... other documentation ...
 *
 * Example
 * @include linalg/fn_qr.inc
 *
  ... other documentation ...
 */
@endcode

Note the near identical syntax as to that used to include the snippet in the 
test; the only difference is the @@ sign to indicate a Doxygen command and the 
lack of quotation marks.

-# Doxygen will place the snippet in the detailed description of a class or 
   function. To see this in action, go to the moris::qr function to see the 
   snippet.


@subsection RepatedDocs Repeated Comments
If a particular comment is repeated either within one class or across classes 
(a 
typical example is a recurring warning that certain functions only operate on 
matrices or only on square matrices), it can be aliased in the Doxygen 
configuration file. To do this, open the  Doxygen configuration file (@p 
MORIS/doc/doxygen/Doxyfile.in) and find the ALIAS tag. Then, enter your 
frequent 
comment and a give it a title. For example,

@verbatim
ALIAS = "only_for_vectors = This is a frequent warning" \
        "other_commands   = This is another frequent comment"
@endverbatim

Note that the last line should not end with a @\! Now, wherever you would like 
your frequent comments to appear, use that title as if it were a command. For 
example,

@verbatim
 * ...
 * \only_for_vectors
 * ...
@endverbatim

@section WritingChapters Modules and Pages
Doxygen allows a project to have pages and modules. Note that all files used for
this purpose use the extension @p dox. Modules will be reserved for topics 
related
directly to working with MORIS, either as a developer or as a user. separate 
pages 
will be used for indirect topics that do not necessarily relate to working with 
MORIS. This section will first discuss modules and then move on to pages.

@subsection DocStructure Defining the Structure
The file @p doc/doxygen/Modules.dox contains the structure of the modules 
included 
in the documentation. The first section of this file defines the top-level 
modules. An example is shown below:

@verbatim
namespace MORIS {

/** @defgroup DevGroup For Developers

This group of modules will be for developers only! Included topics related to
checking out and update the code, running test functions, and how to write tests
and functions.
*/
}
@endverbatim

The @p defgroup command is followed by the module's label, used for referencing.
The remainder of this line is the name of the module and will appear in the 
html and tex output. The paragraph starting in the next line should be a 
description of the module; submodules will appear automatically below that.

The second half of the Modules file adds submodules to each main module. As an
example, the page LinAlgIntro is added to the LinAlg module with the @p 
addtogroup
and @p ingroup commands. Note that the LinAlgIntro submodule is defined in its
own file, @p dox/doxygen/LinAlg_Intro.dox. The file @p 
doc/doxygen/Dev_Modules.dox
defines the substructure of the Developer module, for convenience.

@verbatim
/** @addtogroup LinAlgIntro
    @ingroup LinAlg */
@endverbatim


Note that all @p .dox files are consisted of large comment blocks. The only 
C-code that appears in these files is the namespace declaration, which is 
necessary for Doxygen to group things correctly.

@subsection LowestPages Lowest-Level Groups
The lowest-level pages that are not declared in @p Modules.dox are declared in 
their respective files. Consider, @p FirstPage.dox as an example:

@verbatim
 namespace MORIS {

/** @defgroup Page1 First Test Page

This is the first test page! It should appear under module 1.

This page can continue without using * at the beginning of each line
like a traditional comment block does.

Other doxygen commands like @link ... @endlink can be called within
the text to make references to other parts of the documentation.

This is a link to @link Page3 Page3 @endlink.

*/
}
@endverbatim

@subsection Pages Pages
Simple pages, like the Overview page or the Getting Started page, are not 
defined as part of a structure like the modules. Instead, they are individual 
files. Just like the lowest-level groups, they are essentially a large block of 
comments; the only difference is the Doxygen command that is used to make then:

@verbatim
* @page GettingStarted Getting started
@endverbatim

Doxygen parses pages in alphabetical order by filename, which is less than 
ideal. Because pages will not be used all that much, their order is handled 
directly in the @p doc/Doxygen/moris_layout.xml file. In this file, a link to a 
particular page is called with:

@code{.xml}
<tab type="user" url="@ref GettingStarted" title="Getting started" /> 
@endcode

After making additional pages, their order can be rearranged by placing the 
tabs as desired.

@subsection DoxyCommands Related Doxygen Commands
Both groups and pages can have any type of text or make use of any other 
Doxygen 
commands. For example, you might use @p brief to write a brief description of 
the module. It is important to note that the first word after @p defgroup or @p 
page is the title of that object, and the remainder of that line is what 
appears 
in the documentation.

To write sections, you can use the @p section, @p subsection and @p 
subsubsection commands, much like in latex. The first word after the command is 
the title of the section and the remaining words in the line are what appear in 
the output. You can use the title of the section to reference it with @p ref.


@subsection DoxyLinks Linking in Doxygen
There are three main ways to create links using Doxygen. For a more detailed 
discussion, visit their <a href = 
"http://www.stack.nl/~dimitri/doxygen/manual/autolink.html" > 
Links discussion</a>.

The first way is by using the @p link and @p endlink commands. Note that the 
Doxygen command @p link @b must be capped with the command @p endlink. The 
first 
word that follows @p link is the title of the object you are referencing. The 
remaining text is what appears as the hyperlink. For example, @type{@@link Page1 
The first page @@endlink} makes a link to Page1 but "The first page" 
appears as text.

The second way is using the @p ref command, but this only takes the title of 
the 
object as an argument, so the text that appears as the hyperlink is the same as 
the title of the object. There is no ending command for @p ref. You may also 
make links to C-code using @p ref; for example, you can use @type{@@ref 
arma_Mat} 
to make a link to the arma_Mat documentation.

Finally, certain text syntax are automatically replaced with links. Doxygen 
automatically recognizes the double-colon (::) and replaces that text with an 
appropriate link; for example, typing "moris::Mat" will be automatically turned 
into a link to the moris::Mat documentation. To suppress this automation, use a 
percent sign (%) before the text; for example, "%moris::Mat" will not be 
replaced with a link.

@subsection DoxyMarkup Text Markup with Doxygen
Doxygen has a long list of text markup commands available. For a detailed 
discussion on Doxygen's special command, visit their <a href = 
"http://www.stack.nl/~dimitri/doxygen/manual/commands.html" > Commands </a> 
site. In this section, the most common commands are summarized:

- For single word @b boldface, use @@b.
- For single word @p typeface, use @@p.
- For single word @e emphasis, use @@e or @@em.

Example:
@verbatim
Only @b this word is bolface.
@endverbatim

Output:

Only @b this word is boldface.

- For @bold{multiple word boldface}, place tje desired text within the custom
  command @@bold{}.
- For @type{multiple word typeface}, place the desired text within the custom 
  command @@type{}.
- For @emph{multiple word emphasis}, place the desired text within the custom
  command @@emph{}.

Example:
@verbatim
 @bold{This sentence will be boldface.}
@endverbatim

Output:

@bold{This sentence will be boldface.}

- To have text appear "as-is" on a new-line, use @p verbatim and @p endverbatim.
- To have text appear as code, use the @p code and @p endcode commands. Note 
that @p code takes in a coding language as an argument. For example,

@verbatim
@code{.cpp}
// lines of code
@endcode
@endverbatim

  will make the code appear as C++ code. You may replace the @p .cpp argument 
with other code extensions (such as 
  @p .py for Python code, but Doxygen may not support it (in which, the default 
typewriter font is used).

- To make bullet point lists use a simple hyphen (-) in front of each item.
- To make a numbered point, use a hyphen and pound (-#) in front of each item 
and Doxygen will automatically generate the numbers.

@section CommitMessages Commit Messages

Here is an example of a good commit message
@verbatim
Capitalized, short (50 chars or less) summary

- Additional bulleted text, if necessary. A hypen is used for the bullet, 
followed by a single space, with blank lines between bulleted points. Wrap it 
to 
about 72 characters or so.  In some contexts, the first line is treated as the 
subject of an email and the rest of the text as the body.  The blank line 
separating the summary from the body is critical (unless you omit the body 
entirely); tools like rebase can get confused if you run the two together.

Write your commit message in the past tense.

Further paragraphs come after blank lines.
@endverbatim

In the example above, the summary can be thought of as the "subject" of an 
e-mail, written in the past tense ("fixed bug", etc.). The explanatory text can 
be thought of as the body of the e-mail. 

The commit message should be wrapped to 72 columns.

More important than the mechanics of formatting the body is the practice of 
having a subject line. As the example indicates, you should shoot for about 50 
characters (though this isn't a hard maximum) and always follow it with a blank 
line. This first line should be a concise summary of the changes introduced by 
the commit. 

*/
*/
}

